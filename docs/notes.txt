goto START
# ========================================================================================
# 2012-04-05 (Thursday) 10:52 BST
# 
# Feb/March NYU trip, finished lensed_quasar.py, such that images are
# correctly found about 99.94% of the time (speed_test on 10000 systems, 6
# failures). Guess this is good enough. Mode solve time is about 6ms, mean
# is under 10ms. See plots and logs in tests/solving
# 
# Now need to take predicted image positions and fluxes, and realise them
# as images. This means calls to the tractor routines.

# ========================================================================================
# 2012-05-01 (Tuesday) 09:17 BST

# Organising directories a bit better, into lensfinder module
# Started data_management, onepoint modules to try and deal with 
# PS1 data, tractor style.

# Fit 4 point sources, and the PSF, to one image:

python LensTractor.py -v \
    examples/H1413+117_10x10arcsec_55377.34051_z_sci.fits \
    examples/H1413+117_10x10arcsec_55377.34051_z_var.fits

# Results: PSF not optimized correctly positions of point sources are close.
# PSF also not being initialised correctly, opt2 assigns its own?

# ========================================================================================
# 2012-07-05 (Thursday) 14:05 CEST

# Replace 4 point srcs with 1 LensedPointSource, and optimize that. Need
# to create class, and work on getModelPatch.

# ========================================================================================
# 2012-07-07 (Saturday) 14:32 CEST

# Got emcee sampling working on both lens and nebula! - StepSizes still 
# needed for lens, to make sensible...

python LensTractor.py -s examples/H1413+117_10x10arcsec_55*fits > & junk &

open *lens_progress*png

# :-)

# Current bugs list:
# 
# Bugs
# ----
#  - PSF not being optimized correctly - missing derivatives?
#  - Header PSF FWHM sometimes NaN, hard to recover from
#  - Lens model not being optimized, step sizes and derivatives wrong
#  - StepSizes need optimizing for rapid start-up
#  - Magic numbers for initial mags, needs automating
#  - Memory leak: restrict no. of sampling iterations :-(

# Report to dstn re memory leak.

# Tried adding a CompositeGalaxy to the Nebula model - slowed things down and
# made it harder for points to move, somehow...

# Fixed this! PSF still not optimizing but lens and nebula are going well:

python LensTractor.py -x examples/H1413+117_10x10arcsec_55*fits > examples/H1413+117_10x10arcsec_lenstractor.log

# 2012-07-08 (Sunday) 14:44 CEST

# Dstn got steps and derivs working, now optimizing away!
# Lens is poor fit due to over large step sizes in source plane probably.

# Code up BIC:
# Fitting nebula: chisq, K, N, BIC = 8228.97169136 44 7203 8619.7908183
# Fitting lens: chisq, K, N, BIC = 19256.0491193 35 7203 19566.9279702
# BIC =  {'lens': 19566.927970225803, 'nebula': 8619.7908182981228}
# Fitting result: Bayes factor in favour of nebula is exp[ 5473.56857596 ]

# So, for lens to be a competitive model, it needs a chisq that is less then 
# X greater than Nebula's, where X = (44-35)*log(7203) ~ 80 units
# Fitting result: Bayes factor in favour of nebula is exp[ 5473.56857596 ]

time python LensTractor.py -x examples/H1413+117_10x10arcsec_55*fits > examples/H1413+117_10x10arcsec_lenstractor.log

# 73.442u 1.882s 1:17.67 96.9%    0+0k 275+121io 1pf+0w
# Pretty slow - 1 min 20 secs.
# Idea: do nebula first and check to see if it is lens consistent (ie > 1 resolved, 
#    detected point source? Then spend time saved on good systems.

# Results and code saved in:

mv *png *log 2012-07-08_optimized-both/
cp -r ../LensTractor.py ../lenstractor 2012-07-08_optimized-both/

# Advice from Dstn re optimization:

#   "The step sizes are only used to take the finite-difference approximate
#   derivative.  Ideally the step should be big enough that the model's
#   predictions are different enough so that the numerical errors aren't too
#   big.  (You don't want to be subtracting (1-epsilon) from 1.)  But you want
#   the step to be small enough that the linear approximation is ok."
# 
#   "One thing you could look at is the update direction -- tractor.optimize()
#   returns (delta-logprob, delta-params, alpha) -- (by the way, instead of just
#   optimizing for N steps you could opt until the delta-logprob is small or
#   zero). Look at the delta-params -- how does it want to change the model?  Is
#   it trying to take a huge step in some crazy direction?  You can force only
#   small steps by setting the damping parameter: eg, 
#   tractor.optimize(damp=10.)  If you turn on verbose logging you should see it
#   trying to step in the delta-params direction with different step sizes (by
#   default, from 1e-3 to 1 in factors of sqrt(2), I think)."

# Try and implement some of this.

# ========================================================================================
# 2012-08-15 (Wednesday) 08:46 MST

# At LSST AHM with Dstn. Try and implement source position step sizes 
# that depend on magnification.

time python LensTractor.py -l examples/H1413+117_10x10arcsec_55377.34051_*.fits \
  > examples/H1413+117_10x10arcsec_55377.34051_z_lenstractor_lens-step-size-testing.log

# OK, this takes 16 sec or so, fine. Should be enough to test step sizes.

# With dstn's help, now have control over step sizes. No improvement so far.

# ========================================================================================
# 2013-01-24 (Thursday) 11:44 EST

# Experimenting with initialization.
# Workflow for nebula: 1 -> 2 -> 4.
# Point  sources placed randomly around extended object.

# START:

set expt = $LENSTRACTOR_DIR/examples/2013-01-24_nebula-1-2-4-random-init
mkdir -p $expt
chdir $expt

set logfile = $expt/H1413+117_10x10arcsec_55377.34051_z_lenstractor_nebula-testing.log
echo "Running LensTractor, output in $logfile"
set runfile = $logfile:r.csh

echo "\
time python $LENSTRACTOR_DIR/LensTractor.py -n \\
  $LENSTRACTOR_DIR/examples/H1413+117_10x10arcsec_55377.34051_*.fits \\
  --optimization-rounds 3 \\
  --optimization-steps-catalog 10 \\
  --optimization-steps-psf 0 \\
    > $logfile"   > $runfile

now > $logfile
echo " " >> $logfile
cat $runfile >> $logfile
echo " " >> $logfile

source $runfile
# 64.250u 5.589s 1:19.79 87.5%    0+0k 212+220io 1726pf+0w
# 80s for 30 opt steps, cf 60s for 20
# 
# 80 = c + m*30
# 55 = c + m*20
# -------------
# 25 =     m*10 -> 2.5s per step per 1 image; c = 5s
# 
# At most we have 5 filters * 12 epochs = 60 images
# If we take 30 steps, that's about 2.5*30*60 = 75 mins! Can this be right?
# Still plotting every step!
# Test with more images; also look at dynamic opt, based on value of dlnp...

mv $LENSTRACTOR_DIR/examples/H1413+117_10x10arcsec_55377.34051_*png $expt/

# Typically dlnp is still 10-100 after 30 steps, so still optimizing...

grep BIC $logfile
# nebula1 results: chisq, K, N, BIC = 7190.3225888 16 2401 7314.86083834
# nebula2 results: chisq, K, N, BIC = 5374.75617851 19 2401 5522.64534984
# nebula4 results: chisq, K, N, BIC = 3624.25259014 25 2401 3818.84360505

goto FINISH

# Now, try with all 3 test images and PSF variation...

# START:

set expt = $LENSTRACTOR_DIR/examples/2013-01-24_nebula+psf-1-2-4-random-init
mkdir -p $expt
chdir $expt

set logfile = $expt/H1413+117_10x10arcsec_lenstractor_nebula-testing.log
echo "Running LensTractor, output in $logfile"
set runfile = $logfile:r.csh

echo "\
time python $LENSTRACTOR_DIR/LensTractor.py -x -n \\
  $LENSTRACTOR_DIR/examples/H1413+117_10x10arcsec_55*.fits \\
  --optimization-rounds 3 \\
  --optimization-steps-catalog 10 \\
  --optimization-steps-psf 10 \\
    > $logfile"   > $runfile

now > $logfile
echo " " >> $logfile
cat $runfile >> $logfile
echo " " >> $logfile

source $runfile
# With all plots:
# 231.842u 32.127s 5:23.63 81.5%  0+0k 233+346io 100333pf+0w
# With some plots:
# 33.090u 1.369s 0:35.63 96.6%    0+0k 224+193io 953pf+0w

# 320 secs for 60 steps * 3 images = 1.8s / step / image
# 36 secs -> 0.2 s/step/image OK FINE.

# No plots, 10 PSF opt steps:
# 45.235u 1.485s 0:48.34 96.6%    0+0k 0+22io 0pf+0w

mv $LENSTRACTOR_DIR/examples/*png $expt/

grep BIC $logfile
# nebula1 results: chisq, K, N, BIC = 15090.4641175 32 7203 15374.6962098
# nebula2 results: chisq, K, N, BIC = 14604.5413981 36 7203 14924.302502
# nebula4 results: chisq, K, N, BIC = 10306.8428746 44 7203 10697.6620015

# Clear favouring of 4 pts over 1 or 2!

goto FINISH

# ========================================================================================
# 2013-01-25 (Friday) 10:54 EST

# Initializing Lens model.

# Need a method that takes in a nebula and initializes hte lens model.
# Recipes:
# - galaxy center -> lens center?
# - galaxy q -> lens q
# - select pt srcs by proximity
# - brightest image plus lens center -> sour position

# First up: fix stepsizes and try and optimize lens, and compare with
# nebula - for one image, no PSF optimization.

# START:

set expt = $LENSTRACTOR_DIR/examples/2013-01-25_stepsize-testing
mkdir -p $expt
chdir $expt

set logfile = $expt/H1413+117_10x10arcsec_lenstractor_stepsize-testing.log
echo "Running LensTractor, output in $logfile"
set runfile = $logfile:r.csh

echo "\
time python $LENSTRACTOR_DIR/LensTractor.py  \\
  $LENSTRACTOR_DIR/examples/H1413+117_10x10arcsec_55377.3405*.fits \\
  --optimization-rounds 3 \\
  --optimization-steps-catalog 50 \\
  --optimization-steps-psf 0 \\
    > $logfile"   > $runfile

now > $logfile
echo " " >> $logfile
cat $runfile >> $logfile
echo " " >> $logfile

source $runfile
# 49.450u 1.476s 0:51.30 99.2%    0+0k 0+13io 0pf+0w

mv $LENSTRACTOR_DIR/examples/*png $expt/

grep BIC $logfile
# nebula1 results: chisq, K, N, BIC = 5899.02491102 16 2401 6023.56316056
# nebula2 results: chisq, K, N, BIC = 3766.20330502 19 2401 3914.09247634
# nebula4 results: chisq, K, N, BIC = 2440.71568390 25 2401 2635.30669881
# lens results:    chisq, K, N, BIC = 6557.08384528 19 2401 6704.9730166

# Lens still doesn't fit well - but stepsizes seem sensible.
# alpha still heading to zero though. 

goto FINISH

# OK, try initializing using nebula properties!

# START:

set expt = $LENSTRACTOR_DIR/examples/2013-01-25_lens-init-testing
mkdir -p $expt
chdir $expt

set logfile = $expt/H1413+117_10x10arcsec_lenstractor_lens-testing.log
echo "Running LensTractor, output in $logfile"
set runfile = $logfile:r.csh

echo "\
time python -u $LENSTRACTOR_DIR/LensTractor.py -l \\
  $LENSTRACTOR_DIR/examples/H1413+117_10x10arcsec_55377.3405*.fits \\
  --optimization-rounds 1 \\
  --optimization-steps-catalog 150 \\
  --optimization-steps-psf 0 \\
    > $logfile"   > $runfile

now > $logfile
echo " " >> $logfile
cat $runfile >> $logfile
echo " " >> $logfile

source $runfile
# 49.450u 1.476s 0:51.30 99.2%    0+0k 0+13io 0pf+0w

mv $LENSTRACTOR_DIR/examples/*png $expt/

grep BIC $logfile
# nebula1 results: chisq, K, N, BIC = 5899.02491102 16 2401 6023.56316056
# nebula2 results: chisq, K, N, BIC = 3766.20330502 19 2401 3914.09247634
# nebula4 results: chisq, K, N, BIC = 2440.71568390 25 2401 2635.30669881
# lens results:    chisq, K, N, BIC = 6557.08384528 19 2401 6704.9730166

# Lens still doesn't fit well - but stepsizes seem sensible.
# alpha still heading to zero though. 

goto FINISH


# ========================================================================================
# 2013-02-11 (Monday) 10:30 GMT

# Eric visiting. 
# Investigate random initialisation of lens model

# Try ten positions, and 15 optimisation steps each. Fixed PSF.

START:

set expt = $LENSTRACTOR_DIR/examples/2013-02-11_lens-init-testing
mkdir -p $expt
chdir $expt

set logfile = $expt/H1413+117_10x10arcsec_lenstractor_lens-testing.log
echo "Running LensTractor, output in $logfile"
set runfile = $logfile:r.csh

echo "\
time python -u $LENSTRACTOR_DIR/LensTractor.py -l \\
  $LENSTRACTOR_DIR/examples/H1413+117_10x10arcsec_55377.3405*.fits \\
  --optimization-rounds 1 \\
  --optimization-steps-catalog 15 \\
  --optimization-steps-psf 0 \\
    > $logfile"   > $runfile

now > $logfile
echo " " >> $logfile
cat $runfile >> $logfile
echo " " >> $logfile

source $runfile

mv $LENSTRACTOR_DIR/examples/*png $expt/

grep BIC $logfile

goto FINISH

# ========================================================================================
# 2014-02-28 (Friday) 19:11 PST

# Investigating the SDSS empty image problem...
# First did some reorganisation - sdss folder, renamed LensTractor.py scripts
# to avoid confusion with one true LT script...

# Ran the example:

python LensTractor.py -x \
       -o examples/sdss/0951+2635/0951+2635_Nebula1.cat \
       examples/sdss/0951+2635/*fits > \
       examples/sdss/0951+2635/0951+2635_Nebula1.log

# Traceback (most recent call last):
#   File "LensTractor.py", line 649, in <module>
#     main()
#   File "LensTractor.py", line 444, in main
#     dlnp,X,a = chug.optimize(damp=3)
#   File "/Users/pjm/work/tractor/tractor/engine.py", line 1672, in optimize
#     shared_params=shared_params)
#   File "/Users/pjm/work/tractor/tractor/engine.py", line 2266, in getUpdateDirection
#     X = X[paramindexmap]
# IndexError: index 12 is out of bounds for size 12

# Hmm - what gives? PS1 example runs fine. Check log:

more examples/sdss/0951+2635/0951+2635_Nebula1.log

# ./usr/local/Cellar/python/2.7.2/lib/python2.7/site-packages/numpy/core/_methods.py:55: RuntimeWarning: Mean of empty slice.
#   warnings.warn("Mean of empty slice.", RuntimeWarning)
# /usr/local/Cellar/python/2.7.2/lib/python2.7/site-packages/numpy/core/_methods.py:67: RuntimeWarning: invalid value encountered in true_divide
#   ret = ret.dtype.type(ret / rcount)
# /usr/local/Cellar/python/2.7.2/lib/python2.7/site-packages/matplotlib/colors.py:533: RuntimeWarning: invalid value encountered in less
#   cbook._putmask(xa, xa<0.0, -1)
# Tractor: Finding derivs...
# ..
# Set Ncols= 12
# shared_params: before, X len 12 with 2 non-zero entries
# paramindexmap: len 19 range 0 18

# As Adri says - empty images being read in? Check that dm.py is working, 
# by running with -v (verbose) option...

python LensTractor.py -x -v \
       -o examples/sdss/0951+2635/0951+2635_Nebula1.cat \
       examples/sdss/0951+2635/*fits > \
       examples/sdss/0951+2635/0951+2635_Nebula1.log

# OK - mags look odd, but images are being read in fine:

# ...
# Making Tractor image from examples/sdss/0951+2635/r_*.fits:
# Read in sci image: (101, 101)
# Total flux: 97.0235
# Read in var image: (101, 101)
# Useful variance range: 0.003685 0.120483
# Useful image median level: 0.00337219
# Useful image median pixel uncertainty: 0.136104
#   PSF FWHM = 1.4 pixels
# GaussianMixturePSF: amps=(1.0,), means=(0.0, 0.0), var=(0.22714350384789489, 0.0, 0.0, 0.22714350384789489)
# PS1MagsPhotoCal: r band, zpt=[-5.7844352289010237]
# Total brightness of image (mag): -10.7516273423
# ConstantSky: 0.00337219
# FitsWcs: x0,y0 0.000,0.000, WCS Tan: crpix (46.0, 396.0), crval (147.886, 26.5999), cd (0.000104058, 0, 0, 3.56637e-05), image 101 x 101
#  
# Read in 4 image datasets
#   in 4 bands: ['g' 'i' 'r' 'z']
#   at 4 epochs
#  
# Generic initial position  101 101 (pixels)
# Generic initial SED  {'i': -10.555657486015932, 'r': -10.75162734230053, 'z': -9.6667740112751801, 'g': -10.675768966702206}
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# Initializing model: Nebula1
# ExpGalaxy at RaDecPos: RA, Dec = (147.88544, 26.58727) with Mags: g=-8.17577, i=-8.05566, r=-8.25163, z=-7.16677 and Galaxy Shape: re=0.50, ab=1.00, phi=0.0
# PointSource at RaDecPos: RA, Dec = (147.88544, 26.58727) with Mags: g=-8.17577, i=-8.05566, r=-8.25163, z=-7.16677
# Initialization complete.
# Model = [ExpGalaxy(pos=RaDecPos[147.88543929624, 26.587269007113626], brightness=Mags[-8.175768966702206, -8.0556574860159316, -8.2516273423005302, -7.1667740112751801], re=0.5, ab=1.00, phi=0.0), PointSource(RaDecPos[147.88543726665017, 26.587274873129836], Mags[-8.175768966702206, -8.0556574860159316, -8.2516273423005302, -7.1667740112751801])]
  
#/usr/local/Cellar/python/2.7.2/lib/python2.7/site-packages/numpy/core/_methods.py:55: RuntimeWarning: Mean of empty slice.


# What photocal is being called here?

# ============================================================================
# 2014-04-14 (Monday) 16:58 PDT

# At UCSB, with Adri. Track down SDSS issue. Compare PS1 example to SDSS one.
# Probem with photocal?

# Ran the example:

python LensTractor.py -x -v \
       -o examples/sdss/0951+2635/0951+2635_Nebula1.cat \
          examples/sdss/0951+2635/*fits > \
          examples/sdss/0951+2635/0951+2635_Nebula1.log

python LensTractor.py -x -v \
       -o examples/ps1/H1413+117_10x10arcsec_Nebula1.cat \
          examples/ps1/H1413+117_10x10arcsec_*.fits  > \
          examples/ps1/H1413+117_10x10arcsec_Nebula1.log

# OK, setting zpt to 22.5 gives plausible mags, but problem remains in log
# file:
# 
# mx == 0: 71 of 71 non-zero derivatives, 0 of 71 non-zero weights; 0 non-zero products
# Set Ncols= 12
# LSQR: 12 cols (2 unique), 1 elements
#   0.0 seconds
# shared_params: before, X len 12 with 2 non-zero entries
# paramindexmap: len 19 range 0 18
# Traceback (most recent call last):
#   File "LensTractor.py", line 649, in <module>
#     main()
#   File "LensTractor.py", line 444, in main
#     dlnp,X,a = chug.optimize(damp=3)
#   File "/Users/pjm/work/tractor/tractor/engine.py", line 1672, in optimize
#     shared_params=shared_params)
#   File "/Users/pjm/work/tractor/tractor/engine.py", line 2266, in getUpdateDirection
#     X = X[paramindexmap]
# IndexError: index 12 is out of bounds for size 12

# Fixed by Dustin's suggestion:
# 
#       self.chug.optimize(damp=3,shared_params=False)
# 
#=============================================================================
# 2014-04-23 (Wednesday) 10:59 PDT

# Visited UCSB, worked with Agnello on refactoring to make experiments easier.
# LensTractor as an object, that can initialize and drive itself... 

# Driving implemented: optimization and sampling.

# Intialization not yet started.

# Standard tests, to get roughly working fit. Include plots.

\rm -f examples/sdss/0951+2635/*.cat \
       examples/sdss/0951+2635/*.log \
       examples/sdss/0951+2635/*.png
python LensTractor.py -n 2 \
       -o examples/sdss/0951+2635/0951+2635_Nebula2.cat \
          examples/sdss/0951+2635/*sci.fits > \
          examples/sdss/0951+2635/0951+2635_Nebula2.log

# SDSS example fails:
# - WCS treatment not right (models don't line up?)
# - photocal treatment not right? Based on Agnello's reports...
# - PSF looks much too small

\rm -f examples/ps1/H1413+117*.cat \
       examples/ps1/H1413+117*.log \
       examples/ps1/H1413+117*.png
python LensTractor.py -n 4 \
       -o examples/ps1/H1413+117_10x10arcsec_Nebula4.cat \
          examples/ps1/H1413+117_10x10arcsec_*.fits  > \
          examples/ps1/H1413+117_10x10arcsec_Nebula4.log

# Refactoring of initialiszation complete. Merged back into master branch.
# Next: init Nebula4 from Nebula2, and Lens form NebulaK.

#=============================================================================
# 2014-04-27 (Sunday) 18:33 PDT

# On train from Santa Barbara. Implemented spawn Nebula method, and also 
# experimented with default method of driving LensTractor
# ("cunning_and_guile"). Seems promising - am getting good results on this
# simple Nebula4 test:

time python LensTractor.py -v -n 4 
  -o examples/ps1/H1413+117_10x10arcsec_Nebula4.cat
     examples/ps1/H1413+117_10x10arcsec_*.fits >
     examples/ps1/H1413+117_10x10arcsec_Nebula4.log 
# 25.577u 1.771s 0:27.38 99.8%    0+0k 0+56io 0pf+0w

# Runtime is not great, but fit is getting there...
# Here's the clean up:

\rm examples/ps1/*png examples/ps1/*cat examples/ps1/*log

# Here's the default run: N2->N4->Lens:

time python LensTractor.py -v 
  -o examples/ps1/H1413+117_10x10arcsec
     examples/ps1/H1413+117_10x10arcsec_*.fits >
     examples/ps1/H1413+117_10x10arcsec.log 
     
# Note the improved output catalog and png file names.
# Code fails at Lens initialization, by design. Next job is to init the Lens.

# One thing to note: currently, spawning Nebula4 from Nebula2 does not work
# very well, I don't know why. Maybe the fluxes of the new point sources are
# too large? A flux ratio of 0.2 works a little better - room for 
# improvement still.

#=============================================================================
# 2014-04-29 (Tuesday) 14:15 PDT


# OK, try initializing Lens. Adri's email:

#    The Nebula--> Lens initialisation I had in mind is very simple:
#    1- we adopt the galaxy as the center;
#    2- we compute x-xg,y-yg for all the (2 or 4) images;
#    3- we initialise the source xs,ys as Sum[x-xg,images]/N(images)
#    4- we call the (projected, angular) distance between source and
#     galaxy thetaS, the mean distance of the (2 or 4) images from
#     source as thetaE
#    5- te adopt a total magnification mu=2thetaS/thetaE,
#     small shear aligned with the galaxy (or at 90deg?)
#    6- the source's flux is the total flux from the (2 or 4)
#     Nebula images divided by mu.
# 
#    This is a very rough initialisation, but it should be vague
#     enough to offer a good initial guess in both cases (2 or 4 img's).
# 
#    So the workflow for initialising Lens from Nebula would be:
#    -- drive Nebula by optimizing, with Nr=10, Nc=1000
#    -- get X (the parameter array)
#    -- do points 1-6 above
#    -- drive Lens by optimizing, with Nc and Nc from the dictionary
#     (i.e. fed from command-line).
# 
#    A *very* final hack would be some sort of simulated annealing:
#    for iann in range(Nann)
#       -- varaux = var/(1+Nann-iann)
#       -- dataset =...
#       -- chug=...
#       -- drive [modeltype] by optimizing

# SDSS example:

\rm examples/sdss/0951+2635/*.png examples/sdss/0951+2635/*.log examples/sdss/0951+2635/*.cat 

python LensTractor.py -v -l -z --survey SDSS \
   -o examples/sdss/0951+2635/J0951n_30x30arcsec_99999.90000_r \
      examples/sdss/0951+2635/J*_r_sci.fits > \
      examples/sdss/0951+2635/J0951n_30x30arcsec_99999.90000_r.log &

# Works fine after fixing centroiding...
# Counter not being reset?

# Anyway, lens now initialized from nebula, albeit badly...!

#=============================================================================
# 2014-04-30 (Wednesday) 10:47 PDT

# Experimenting with optimizing PSF too, after initial Nebula fit:

# elif self.method == 'optimizing':
# 
#      # First optimize to get the model about right, at fixed PSF:
#      self.settings['Nrounds'] = 3
#      self.settings['Nsteps_optimizing_catalog'] = 5
#      self.settings['Nsteps_optimizing_PSFs'] = 0
#      self.optimize()
# 
#      # Now optimize PSF at fixed model:
#      self.settings['Nrounds'] = 1
#      self.settings['Nsteps_optimizing_catalog'] = 0
#      self.settings['Nsteps_optimizing_PSFs'] = 5
#      self.optimize()
# 
#      # Refine model at best PSF:
#      self.settings['Nrounds'] = 1
#      self.settings['Nsteps_optimizing_catalog'] = 5
#      self.settings['Nsteps_optimizing_PSFs'] = 0
#      self.optimize()
 
# Test on 0951:

\rm examples/sdss/0951+2635/*.png examples/sdss/0951+2635/*.log examples/sdss/0951+2635/*.cat 

time python LensTractor.py -v -l -z --survey SDSS \
   -o examples/sdss/0951+2635/J0951n_30x30arcsec_99999.90000 \
      examples/sdss/0951+2635/J*_?_sci.fits > \
      examples/sdss/0951+2635/J0951n_30x30arcsec_99999.90000.log &

# Works fine! Needed to re-thaw/re-freeze after PSF optimization.
# CPUtime to do Lens given Nebula with this optimization scheme ~ 1 minute.

#=============================================================================
# 2014-04-30 (Wednesday) 13:31 PDT

# Test on KiDS images that are checked in, and maybe some from the datapacks online.

set KIDS_DIR = /Users/pjm/work/stronglensing/KiDS/test-cutouts/data

set ids = (\
SLID_10058881_SID_8668 \
)

foreach id ( $ids )
    foreach filter ( u g r i )
        set sci = `ls $KIDS_DIR/*_${filter}_*_${id}_*100.fits`
        set exsci = examples/kids/KIDS_${id}_${filter}_sci.fits
        cp -v $sci $exsci
        set wht = $sci:r.weight.fits
        set exwht = `echo $exsci | sed s/sci/wht/g`
        cp -v $wht $exwht
    end
end

set id = KIDS_SLID_10058881_SID_8668
time python LensTractor.py -v -l -z --survey KIDS \
   -o examples/kids/${id} \
      examples/kids/${id}_?_???.fits > \
      examples/kids/${id}.log &

# Lens initializes, but can't make patches:

#   File "/users/pjm/work/stronglensing/LensTractor/lenstractor/lens.py", line 199, in getModelPatch
#     patch += PS.getModelPatch(img)
#   File "/Users/pjm/work/tractor/tractor/engine.py", line 525, in __add__
#     return self.performArithmetic(other, '__iadd__')
#   File "/Users/pjm/work/tractor/tractor/engine.py", line 492, in performArithmetic
#     assert(isinstance(other, Patch))
# AssertionError

# i band image has object masked out. Try running without this image:

\rm examples/kids/*.png examples/kids/*.log examples/kids/*.cat examples/kids/*.cookie 

set id = KIDS_SLID_10058881_SID_8668
time python LensTractor.py -v -l -z --survey KIDS \
   -o examples/kids/${id} \
      examples/kids/${id}_u_???.fits \
      examples/kids/${id}_g_???.fits \
      examples/kids/${id}_r_???.fits > \
      examples/kids/${id}.log &

# Lens wins BIC by exp(100) or so, getting a better fit. Why?
#  1) Nebula2 did not converge?
#  2) Lens only has one image, so the fit isnt messed up by the second point source. 
# Example output:

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# Nebula2 results: chisq, K, N, BIC = 22306.2232536 18 30603 22492.1426134
# DevGalaxy at RaDecPos: RA, Dec = (131.88174, 2.56325) with Mags: g=22.309, r=21.8946, u=23.2185 and Galaxy Shape: re=0.04, ab=0.92, phi=-126.0
# PointSource at RaDecPos: RA, Dec = (131.88163, 2.56311) with Mags: g=24.734, r=24.253, u=24.758
# PointSource at RaDecPos: RA, Dec = (131.88177, 2.56310) with Mags: g=23.8507, r=23.3332, u=24.8397
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# Lens results: chisq, K, N, BIC = 22268.1172902 16 30603 22433.3789434
# PointSourceLens comprising a LensGalaxy at RaDecPos: RA, Dec = (131.88175, 2.56326) with Mags: g=22.2455, r=21.8027, u=23.1461 and Galaxy Shape: re=0.11, ab=0.98, phi=72.0 and EinsteinRadius: 0.0737226 and External shear: gamma=0.2, phi=-149.1 and a PointSource at RaDecPos: RA, Dec = (131.88172, 2.56314) with Mags: g=23.7137, r=23.2222, u=24.177
# Lens parameter values written to: examples/kids/KIDS_SLID_10058881_SID_8668_Lens.cat
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# BIC =  {'Lens': 22433.378943382228, 'Nebula': 22492.142613356249}
# Hypothesis test result: Bayes factor in favour of Lens is exp[ 29.381834987 ]
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

# Try Nebula1 (init from scratch of course):

set id = KIDS_SLID_10058881_SID_8668
time python LensTractor.py -v -n 1 -z --survey KIDS \
   -o examples/kids/${id} \
      examples/kids/${id}_u_???.fits \
      examples/kids/${id}_g_???.fits \
      examples/kids/${id}_r_???.fits > \
      examples/kids/${id}_Nebula1.log &

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# Nebula1 results: chisq, K, N, BIC = 22371.1758922 13 30603 22505.4509854
# DevGalaxy at RaDecPos: RA, Dec = (131.88174, 2.56326) with Mags: g=22.2449, r=21.8268, u=23.1753 and Galaxy Shape: re=0.04, ab=0.91, phi=-82.2
# PointSource at RaDecPos: RA, Dec = (131.88174, 2.56309) with Mags: g=23.8223, r=23.3274, u=24.1568
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

# Hmm. Higher chisq than both Nebula2 and Lens! What's going on?
# Check number of images predicted by Lens:

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# Lens results: chisq, K, N, BIC = 22271.7981695 16 30603 22437.0598226
# PointSourceLens comprising a LensGalaxy at RaDecPos: RA, Dec = (131.88175,
# 2.56326) with Mags: g=22.2736, r=21.8371, u=23.1691 and Galaxy Shape: re=0.11,
# ab=0.98, phi=-31.3 and EinsteinRadius: 0.100867 and External shear: gamma=0.1,
# phi=-20.9 and a PointSource at RaDecPos: RA, Dec = (131.88176, 2.56315) with
# Mags: g=23.7331, r=23.2332, u=24.2091 where 1 images are predicted
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

# OK, reject these as weak lenses!
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# BIC =  {'Lens': 22439.465100882804, 'Nebula': 22468.750809488483}
# Hypothesis test result: Bayes factor in favour of Lens is exp[ 14.6428543028 ]
# BUT: Lens predicts only 1 image, so it's not a strong lens.
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

# OK. Need to write this result out as a cookie...
# Done! Amend rm statement.

# Now: test on 0951!

\rm examples/sdss/0951+2635/*.png examples/sdss/0951+2635/*.log \
    examples/sdss/0951+2635/*.cat examples/sdss/0951+2635/*.cookie 

time python LensTractor.py -v -l -z --survey SDSS \
   -o examples/sdss/0951+2635/J0951n_30x30arcsec_99999.90000 \
      examples/sdss/0951+2635/J*_?_sci.fits > \
      examples/sdss/0951+2635/J0951n_30x30arcsec_99999.90000.log &
      
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# Nebula2 results: chisq, K, N, BIC = 92569.9986223 21 22500 92780.4453047
# DevGalaxy at RaDecPos: RA, Dec = (147.84399, 26.58708) with Mags: g=18.7648, i=18.2156, r=18.2473, z=18.8377 and Galaxy Shape: re=0.30, ab=0.62, phi=-51.5
# PointSource at RaDecPos: RA, Dec = (147.84400, 26.58711) with Mags: g=19.5918, i=19.2204, r=19.3628, z=18.7996
# PointSource at RaDecPos: RA, Dec = (147.84394, 26.58705) with Mags: g=18.1281, i=17.6969, r=17.7414, z=17.5997
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# Lens results: chisq, K, N, BIC = 91081.5245173 18 22500 91261.9073878
# PointSourceLens comprising a LensGalaxy at RaDecPos: RA, Dec = (147.84399, 26.58709) with Mags: g=18.6027, i=18.1117, r=18.1779, z=18.4956 and Galaxy Shape: re=0.37, ab=0.75, phi=-54.9 and EinsteinRadius: 0.15453 and External shear: gamma=0.1, phi=-81.8 and a PointSource at RaDecPos: RA, Dec = (147.84397, 26.58708) with Mags: g=19.3766, i=18.9119, r=18.9762, z=18.7924 where 2 images are predicted
# Lens parameter values written to: examples/sdss/0951+2635/J0951n_30x30arcsec_99999_Lens.cat
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# BIC =  {'Lens': 91261.907387838088, 'Nebula': 92780.44530469543}
# Hypothesis test result: Bayes factor in favour of Lens is exp[ 759.268958429 ]
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


# Hmm: Lens still returning lower chisq. Why is this?
# Nebula seems to want to fit point sources with nebuluous galaxy. Lens has
# to have 2 points, and so fits better. Do we need to return to Nebula 
# after fitting Lens, in order to ensure chisq(Nebula) is lower? Hmm...


# Relatedly, what do we get for H1413? Do Nebula2,4,Lens.

\rm examples/ps1/*png examples/ps1/*cat examples/ps1/*log examples/ps1/*cookie

time python LensTractor.py -v -z \
  -o examples/ps1/H1413+117_10x10arcsec \
     examples/ps1/H1413+117_10x10arcsec_*.fits > \
     examples/ps1/H1413+117_10x10arcsec.log &

# First time running with PSF optimization?
# 
# In this run, BIC(N4) < BIC(Lens) < BIC(N2) - but Lens loses big time.
# Inspection of images shows that PSF screws up horribly, such that all fits 
# are kind of meaningless. Need to do N4 without PSF optimization, in this case.
# Run time was about 95 secs.

# If we just do N4->Lens, we get bad fits too. Hacked this into the main script:
#      modelnames = ['Nebula4','Lens']
# and ran with -l.

# Does it really need the sampling step, then?
# Try with out the -z flag, to include a bit of sampling.

time python LensTractor.py -v -l \
  -o examples/ps1/H1413+117_10x10arcsec \
     examples/ps1/H1413+117_10x10arcsec_*.fits > \
     examples/ps1/H1413+117_10x10arcsec.log &
     
# Helps a bit - but we really need Nebula4 to converge before optimizing the
# PSFs, otherwise they go elliptical and cover up some of the bad fit...

# 2014-05-01 (Thursday) 18:07 PDT

# With Adri, trying to turn off galaxy in the early stages of fit...

#  self.settings['Nrounds'] = 3
#  self.settings['Nsteps_optimizing_catalog'] = 15
#  self.settings['Nsteps_optimizing_PSFs'] = 2
#  self.optimize()

# Only optimizing, only fitting Lens (but that means N2 first). 

\rm examples/sdss/0951+2635/*.png examples/sdss/0951+2635/*.log \
    examples/sdss/0951+2635/*.cat examples/sdss/0951+2635/*.cookie 

time python LensTractor.py -v -l -z --survey SDSS \
   -o examples/sdss/0951+2635/J0951n_30x30arcsec_99999.90000 \
      examples/sdss/0951+2635/J*_?_sci.fits > \
      examples/sdss/0951+2635/J0951n_30x30arcsec_99999.90000.log &

# Hmm. Error:
# 
# Initialization complete: 
# Traceback (most recent call last):
#   File "LensTractor.py", line 344, in <module>
#     main()
#   File "LensTractor.py", line 269, in main
#     LT = lenstractor.LensTractor(dataset,model,args.survey,counter=counter,vb=vb,noplots=args.noplots)
#   File "/users/pjm/work/stronglensing/LensTractor/lenstractor/driver.py", line 106, in __init__
#     self.plot_state('progress-%02d_initial_'%self.counter+self.model.name)
#   File "/users/pjm/work/stronglensing/LensTractor/lenstractor/driver.py", line 523, in plot_state
#     chi = self.chug.getChiImage(i)
#   File "/Users/pjm/work/tractor/tractor/engine.py", line 2507, in getChiImage
#     mod = self.getModelImage(img, srcs=srcs, minsb=minsb)
#   File "/Users/pjm/work/tractor/tractor/engine.py", line 2373, in getModelImage
#     patch = self.getModelPatch(img, src, minsb=minsb)
#   File "/Users/pjm/work/tractor/tractor/engine.py", line 2335, in getModelPatch
#     deps = (img.hashkey(), src.hashkey())
#   File "/Users/pjm/work/tractor/tractor/utils.py", line 669, in hashkey
#     t.append(s.hashkey())
# AttributeError: 'numpy.ndarray' object has no attribute 'hashkey'

\rm examples/ps1/*png examples/ps1/*cat examples/ps1/*log examples/ps1/*cookie

time python LensTractor.py -v -l -z \
  -o examples/ps1/H1413+117_10x10arcsec \
     examples/ps1/H1413+117_10x10arcsec_*.fits > \
     examples/ps1/H1413+117_10x10arcsec.log &

# Same error.
# =============================================================================
FINISH:
