goto START
# ========================================================================================
# 2012-04-05 (Thursday) 10:52 BST
# 
# Feb/March NYU trip, finished lensed_quasar.py, such that images are
# correctly found about 99.94% of the time (speed_test on 10000 systems, 6
# failures). Guess this is good enough. Mode solve time is about 6ms, mean
# is under 10ms. See plots and logs in tests/solving
# 
# Now need to take predicted image positions and fluxes, and realise them
# as images. This means calls to the tractor routines.

# ========================================================================================
# 2012-05-01 (Tuesday) 09:17 BST

# Organising directories a bit better, into lensfinder module
# Started data_management, onepoint modules to try and deal with 
# PS1 data, tractor style.

# Fit 4 point sources, and the PSF, to one image:

python LensTractor.py -v \
    examples/H1413+117_10x10arcsec_55377.34051_z_sci.fits \
    examples/H1413+117_10x10arcsec_55377.34051_z_var.fits

# Results: PSF not optimized correctly positions of point sources are close.
# PSF also not being initialised correctly, opt2 assigns its own?

# ========================================================================================
# 2012-07-05 (Thursday) 14:05 CEST

# Replace 4 point srcs with 1 LensedPointSource, and optimize that. Need
# to create class, and work on getModelPatch.

# ========================================================================================
# 2012-07-07 (Saturday) 14:32 CEST

# Got emcee sampling working on both lens and nebula! - StepSizes still 
# needed for lens, to make sensible...

python LensTractor.py -s examples/H1413+117_10x10arcsec_55*fits > & junk &

open *lens_progress*png

# :-)

# Current bugs list:
# 
# Bugs
# ----
#  - PSF not being optimized correctly - missing derivatives?
#  - Header PSF FWHM sometimes NaN, hard to recover from
#  - Lens model not being optimized, step sizes and derivatives wrong
#  - StepSizes need optimizing for rapid start-up
#  - Magic numbers for initial mags, needs automating
#  - Memory leak: restrict no. of sampling iterations :-(

# Report to dstn re memory leak.

# Tried adding a CompositeGalaxy to the Nebula model - slowed things down and
# made it harder for points to move, somehow...

# Fixed this! PSF still not optimizing but lens and nebula are going well:

python LensTractor.py -x examples/H1413+117_10x10arcsec_55*fits > examples/H1413+117_10x10arcsec_lenstractor.log

# 2012-07-08 (Sunday) 14:44 CEST

# Dstn got steps and derivs working, now optimizing away!
# Lens is poor fit due to over large step sizes in source plane probably.

# Code up BIC:
# Fitting nebula: chisq, K, N, BIC = 8228.97169136 44 7203 8619.7908183
# Fitting lens: chisq, K, N, BIC = 19256.0491193 35 7203 19566.9279702
# BIC =  {'lens': 19566.927970225803, 'nebula': 8619.7908182981228}
# Fitting result: Bayes factor in favour of nebula is exp[ 5473.56857596 ]

# So, for lens to be a competitive model, it needs a chisq that is less then 
# X greater than Nebula's, where X = (44-35)*log(7203) ~ 80 units
# Fitting result: Bayes factor in favour of nebula is exp[ 5473.56857596 ]

time python LensTractor.py -x examples/H1413+117_10x10arcsec_55*fits > examples/H1413+117_10x10arcsec_lenstractor.log

# 73.442u 1.882s 1:17.67 96.9%    0+0k 275+121io 1pf+0w
# Pretty slow - 1 min 20 secs.
# Idea: do nebula first and check to see if it is lens consistent (ie > 1 resolved, 
#    detected point source? Then spend time saved on good systems.

# Results and code saved in:

mv *png *log 2012-07-08_optimized-both/
cp -r ../LensTractor.py ../lenstractor 2012-07-08_optimized-both/

# Advice from Dstn re optimization:

#   "The step sizes are only used to take the finite-difference approximate
#   derivative.  Ideally the step should be big enough that the model's
#   predictions are different enough so that the numerical errors aren't too
#   big.  (You don't want to be subtracting (1-epsilon) from 1.)  But you want
#   the step to be small enough that the linear approximation is ok."
# 
#   "One thing you could look at is the update direction -- tractor.optimize()
#   returns (delta-logprob, delta-params, alpha) -- (by the way, instead of just
#   optimizing for N steps you could opt until the delta-logprob is small or
#   zero). Look at the delta-params -- how does it want to change the model?  Is
#   it trying to take a huge step in some crazy direction?  You can force only
#   small steps by setting the damping parameter: eg, 
#   tractor.optimize(damp=10.)  If you turn on verbose logging you should see it
#   trying to step in the delta-params direction with different step sizes (by
#   default, from 1e-3 to 1 in factors of sqrt(2), I think)."

# Try and implement some of this.

# ========================================================================================
# 2012-08-15 (Wednesday) 08:46 MST

# At LSST AHM with Dstn. Try and implement source position step sizes 
# that depend on magnification.

time python LensTractor.py -l examples/H1413+117_10x10arcsec_55377.34051_*.fits \
  > examples/H1413+117_10x10arcsec_55377.34051_z_lenstractor_lens-step-size-testing.log

# OK, this takes 16 sec or so, fine. Should be enough to test step sizes.

# With dstn's help, now have control over step sizes. No improvement so far.

# ========================================================================================
# 2013-01-24 (Thursday) 11:44 EST

# Experimenting with initialization.
# Workflow for nebula: 1 -> 2 -> 4.
# Point  sources placed randomly around extended object.

# START:

set expt = $LENSTRACTOR_DIR/examples/2013-01-24_nebula-1-2-4-random-init
mkdir -p $expt
chdir $expt

set logfile = $expt/H1413+117_10x10arcsec_55377.34051_z_lenstractor_nebula-testing.log
echo "Running LensTractor, output in $logfile"
set runfile = $logfile:r.csh

echo "\
time python $LENSTRACTOR_DIR/LensTractor.py -n \\
  $LENSTRACTOR_DIR/examples/H1413+117_10x10arcsec_55377.34051_*.fits \\
  --optimization-rounds 3 \\
  --optimization-steps-catalog 10 \\
  --optimization-steps-psf 0 \\
    > $logfile"   > $runfile

now > $logfile
echo " " >> $logfile
cat $runfile >> $logfile
echo " " >> $logfile

source $runfile
# 64.250u 5.589s 1:19.79 87.5%    0+0k 212+220io 1726pf+0w
# 80s for 30 opt steps, cf 60s for 20
# 
# 80 = c + m*30
# 55 = c + m*20
# -------------
# 25 =     m*10 -> 2.5s per step per 1 image; c = 5s
# 
# At most we have 5 filters * 12 epochs = 60 images
# If we take 30 steps, that's about 2.5*30*60 = 75 mins! Can this be right?
# Still plotting every step!
# Test with more images; also look at dynamic opt, based on value of dlnp...

mv $LENSTRACTOR_DIR/examples/H1413+117_10x10arcsec_55377.34051_*png $expt/

# Typically dlnp is still 10-100 after 30 steps, so still optimizing...

grep BIC $logfile
# nebula1 results: chisq, K, N, BIC = 7190.3225888 16 2401 7314.86083834
# nebula2 results: chisq, K, N, BIC = 5374.75617851 19 2401 5522.64534984
# nebula4 results: chisq, K, N, BIC = 3624.25259014 25 2401 3818.84360505

goto FINISH

# Now, try with all 3 test images and PSF variation...

# START:

set expt = $LENSTRACTOR_DIR/examples/2013-01-24_nebula+psf-1-2-4-random-init
mkdir -p $expt
chdir $expt

set logfile = $expt/H1413+117_10x10arcsec_lenstractor_nebula-testing.log
echo "Running LensTractor, output in $logfile"
set runfile = $logfile:r.csh

echo "\
time python $LENSTRACTOR_DIR/LensTractor.py -x -n \\
  $LENSTRACTOR_DIR/examples/H1413+117_10x10arcsec_55*.fits \\
  --optimization-rounds 3 \\
  --optimization-steps-catalog 10 \\
  --optimization-steps-psf 10 \\
    > $logfile"   > $runfile

now > $logfile
echo " " >> $logfile
cat $runfile >> $logfile
echo " " >> $logfile

source $runfile
# With all plots:
# 231.842u 32.127s 5:23.63 81.5%  0+0k 233+346io 100333pf+0w
# With some plots:
# 33.090u 1.369s 0:35.63 96.6%    0+0k 224+193io 953pf+0w

# 320 secs for 60 steps * 3 images = 1.8s / step / image
# 36 secs -> 0.2 s/step/image OK FINE.

# No plots, 10 PSF opt steps:
# 45.235u 1.485s 0:48.34 96.6%    0+0k 0+22io 0pf+0w

mv $LENSTRACTOR_DIR/examples/*png $expt/

grep BIC $logfile
# nebula1 results: chisq, K, N, BIC = 15090.4641175 32 7203 15374.6962098
# nebula2 results: chisq, K, N, BIC = 14604.5413981 36 7203 14924.302502
# nebula4 results: chisq, K, N, BIC = 10306.8428746 44 7203 10697.6620015

# Clear favouring of 4 pts over 1 or 2!

goto FINISH

# ========================================================================================
# 2013-01-25 (Friday) 10:54 EST

# Initializing Lens model.

# Need a method that takes in a nebula and initializes hte lens model.
# Recipes:
# - galaxy center -> lens center?
# - galaxy q -> lens q
# - select pt srcs by proximity
# - brightest image plus lens center -> sour position

# First up: fix stepsizes and try and optimize lens, and compare with
# nebula - for one image, no PSF optimization.

START:

set expt = $LENSTRACTOR_DIR/examples/2013-01-25_lens-init-testing
mkdir -p $expt
chdir $expt

set logfile = $expt/H1413+117_10x10arcsec_lenstractor_lens-testing.log
echo "Running LensTractor, output in $logfile"
set runfile = $logfile:r.csh

echo "\
time python $LENSTRACTOR_DIR/LensTractor.py  \\
  $LENSTRACTOR_DIR/examples/H1413+117_10x10arcsec_55377.3405*.fits \\
  --optimization-rounds 3 \\
  --optimization-steps-catalog 50 \\
  --optimization-steps-psf 0 \\
    > $logfile"   > $runfile

now > $logfile
echo " " >> $logfile
cat $runfile >> $logfile
echo " " >> $logfile

source $runfile
# 49.450u 1.476s 0:51.30 99.2%    0+0k 0+13io 0pf+0w

mv $LENSTRACTOR_DIR/examples/*png $expt/

grep BIC $logfile
# nebula1 results: chisq, K, N, BIC = 5899.02491102 16 2401 6023.56316056
# nebula2 results: chisq, K, N, BIC = 3766.20330502 19 2401 3914.09247634
# nebula4 results: chisq, K, N, BIC = 2440.7156839 25 2401 2635.30669881
# lens results:    chisq, K, N, BIC = 6557.08384528 19 2401 6704.9730166

# Lens still doesn't fit well - but stepsizes seem sensible.
# alpha still heading to zero though. 

goto FINISH


# ========================================================================================
FINISH:
