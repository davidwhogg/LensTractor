# ========================================================================================
# 2012-04-05 (Thursday) 10:52 BST
# 
# Feb/March NYU trip, finished lensed_quasar.py, such that images are
# correctly found about 99.94% of the time (speed_test on 10000 systems, 6
# failures). Guess this is good enough. Mode solve time is about 6ms, mean
# is under 10ms. See plots and logs in tests/solving
# 
# Now need to take predicted image positions and fluxes, and realise them
# as images. This means calls to the tractor routines.

# ========================================================================================
# 2012-05-01 (Tuesday) 09:17 BST

# Organising directories a bit better, into lensfinder module
# Started data_management, onepoint modules to try and deal with 
# PS1 data, tractor style.

# Fit 4 point sources, and the PSF, to one image:

python LensTractor.py -v \
    examples/H1413+117_10x10arcsec_55377.34051_z_sci.fits \
    examples/H1413+117_10x10arcsec_55377.34051_z_var.fits

# Results: PSF not optimized correctly positions of point sources are close.
# PSF also not being initialised correctly, opt2 assigns its own?

# ========================================================================================
# 2012-07-05 (Thursday) 14:05 CEST

# Replace 4 point srcs with 1 LensedPointSource, and optimize that. Need
# to create class, and work on getModelPatch.

# ========================================================================================
# 2012-07-07 (Saturday) 14:32 CEST

# Got emcee sampling working on both lens and nebula! - StepSizes still 
# needed for lens, to make sensible...

python LensTractor.py -s examples/H1413+117_10x10arcsec_55*fits > & junk &

open *lens_progress*png

# :-)

# Current bugs list:
# 
# Bugs
# ----
#  - PSF not being optimized correctly - missing derivatives?
#  - Header PSF FWHM sometimes NaN, hard to recover from
#  - Lens model not being optimized, step sizes and derivatives wrong
#  - StepSizes need optimizing for rapid start-up
#  - Magic numbers for initial mags, needs automating
#  - Memory leak: restrict no. of sampling iterations :-(

# Report to dstn re memory leak.

# Tried adding a CompositeGalaxy to the Nebula model - slowed things down and
# made it harder for points to move, somehow...

# Fixed this! PSF still not optimizing but lens and nebula are going well:

python LensTractor.py -x examples/H1413+117_10x10arcsec_55*fits > examples/H1413+117_10x10arcsec_lenstractor.log

# 2012-07-08 (Sunday) 14:44 CEST

# Dstn got steps and derivs working, now optimizing away!
# Lens is poor fit due to over large step sizes in source plane probably.

# Code up BIC:
# Fitting nebula: chisq, K, N, BIC = 8228.97169136 44 7203 8619.7908183
# Fitting lens: chisq, K, N, BIC = 19256.0491193 35 7203 19566.9279702
# BIC =  {'lens': 19566.927970225803, 'nebula': 8619.7908182981228}
# Fitting result: Bayes factor in favour of nebula is exp[ 5473.56857596 ]

# So, for lens to be a competitive model, it needs a chisq that is less then 
# X greater than Nebula's, where X = (44-35)*log(7203) ~ 80 units
# Fitting result: Bayes factor in favour of nebula is exp[ 5473.56857596 ]

time python LensTractor.py -x examples/H1413+117_10x10arcsec_55*fits > examples/H1413+117_10x10arcsec_lenstractor.log

# 73.442u 1.882s 1:17.67 96.9%    0+0k 275+121io 1pf+0w
# Pretty slow - 1 min 20 secs.
# Idea: do nebula first and check to see if it is lens consistent (ie > 1 resolved, 
#    detected point source? Then spend time saved on good systems.

# Results and code saved in:

mv *png *log 2012-07-08_optimized-both/
cp -r ../LensTractor.py ../lenstractor 2012-07-08_optimized-both/

# ========================================================================================
