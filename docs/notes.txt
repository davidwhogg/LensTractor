goto START
# ========================================================================================
# 2012-04-05 (Thursday) 10:52 BST
# 
# Feb/March NYU trip, finished lensed_quasar.py, such that images are
# correctly found about 99.94% of the time (speed_test on 10000 systems, 6
# failures). Guess this is good enough. Mode solve time is about 6ms, mean
# is under 10ms. See plots and logs in tests/solving
# 
# Now need to take predicted image positions and fluxes, and realise them
# as images. This means calls to the tractor routines.

# ========================================================================================
# 2012-05-01 (Tuesday) 09:17 BST

# Organising directories a bit better, into lensfinder module
# Started data_management, onepoint modules to try and deal with 
# PS1 data, tractor style.

# Fit 4 point sources, and the PSF, to one image:

python LensTractor.py -v \
    examples/H1413+117_10x10arcsec_55377.34051_z_sci.fits \
    examples/H1413+117_10x10arcsec_55377.34051_z_var.fits

# Results: PSF not optimized correctly positions of point sources are close.
# PSF also not being initialised correctly, opt2 assigns its own?

# ========================================================================================
# 2012-07-05 (Thursday) 14:05 CEST

# Replace 4 point srcs with 1 LensedPointSource, and optimize that. Need
# to create class, and work on getModelPatch.

# ========================================================================================
# 2012-07-07 (Saturday) 14:32 CEST

# Got emcee sampling working on both lens and nebula! - StepSizes still 
# needed for lens, to make sensible...

python LensTractor.py -s examples/H1413+117_10x10arcsec_55*fits > & junk &

open *lens_progress*png

# :-)

# Current bugs list:
# 
# Bugs
# ----
#  - PSF not being optimized correctly - missing derivatives?
#  - Header PSF FWHM sometimes NaN, hard to recover from
#  - Lens model not being optimized, step sizes and derivatives wrong
#  - StepSizes need optimizing for rapid start-up
#  - Magic numbers for initial mags, needs automating
#  - Memory leak: restrict no. of sampling iterations :-(

# Report to dstn re memory leak.

# Tried adding a CompositeGalaxy to the Nebula model - slowed things down and
# made it harder for points to move, somehow...

# Fixed this! PSF still not optimizing but lens and nebula are going well:

python LensTractor.py -x examples/H1413+117_10x10arcsec_55*fits > examples/H1413+117_10x10arcsec_lenstractor.log

# 2012-07-08 (Sunday) 14:44 CEST

# Dstn got steps and derivs working, now optimizing away!
# Lens is poor fit due to over large step sizes in source plane probably.

# Code up BIC:
# Fitting nebula: chisq, K, N, BIC = 8228.97169136 44 7203 8619.7908183
# Fitting lens: chisq, K, N, BIC = 19256.0491193 35 7203 19566.9279702
# BIC =  {'lens': 19566.927970225803, 'nebula': 8619.7908182981228}
# Fitting result: Bayes factor in favour of nebula is exp[ 5473.56857596 ]

# So, for lens to be a competitive model, it needs a chisq that is less then 
# X greater than Nebula's, where X = (44-35)*log(7203) ~ 80 units
# Fitting result: Bayes factor in favour of nebula is exp[ 5473.56857596 ]

time python LensTractor.py -x examples/H1413+117_10x10arcsec_55*fits > examples/H1413+117_10x10arcsec_lenstractor.log

# 73.442u 1.882s 1:17.67 96.9%    0+0k 275+121io 1pf+0w
# Pretty slow - 1 min 20 secs.
# Idea: do nebula first and check to see if it is lens consistent (ie > 1 resolved, 
#    detected point source? Then spend time saved on good systems.

# Results and code saved in:

mv *png *log 2012-07-08_optimized-both/
cp -r ../LensTractor.py ../lenstractor 2012-07-08_optimized-both/

# Advice from Dstn re optimization:

#   "The step sizes are only used to take the finite-difference approximate
#   derivative.  Ideally the step should be big enough that the model's
#   predictions are different enough so that the numerical errors aren't too
#   big.  (You don't want to be subtracting (1-epsilon) from 1.)  But you want
#   the step to be small enough that the linear approximation is ok."
# 
#   "One thing you could look at is the update direction -- tractor.optimize()
#   returns (delta-logprob, delta-params, alpha) -- (by the way, instead of just
#   optimizing for N steps you could opt until the delta-logprob is small or
#   zero). Look at the delta-params -- how does it want to change the model?  Is
#   it trying to take a huge step in some crazy direction?  You can force only
#   small steps by setting the damping parameter: eg, 
#   tractor.optimize(damp=10.)  If you turn on verbose logging you should see it
#   trying to step in the delta-params direction with different step sizes (by
#   default, from 1e-3 to 1 in factors of sqrt(2), I think)."

# Try and implement some of this.

# ========================================================================================
# 2012-08-15 (Wednesday) 08:46 MST

# At LSST AHM with Dstn. Try and implement source position step sizes 
# that depend on magnification.

time python LensTractor.py -l examples/H1413+117_10x10arcsec_55377.34051_*.fits \
  > examples/H1413+117_10x10arcsec_55377.34051_z_lenstractor_lens-step-size-testing.log

# OK, this takes 16 sec or so, fine. Should be enough to test step sizes.

# With dstn's help, now have control over step sizes. No improvement so far.

# ========================================================================================
# 2013-01-24 (Thursday) 11:44 EST

# Experimenting with initialization.
# Workflow for nebula: 1 -> 2 -> 4.
# Point  sources placed randomly around extended object.

# START:

set expt = $LENSTRACTOR_DIR/examples/2013-01-24_nebula-1-2-4-random-init
mkdir -p $expt
chdir $expt

set logfile = $expt/H1413+117_10x10arcsec_55377.34051_z_lenstractor_nebula-testing.log
echo "Running LensTractor, output in $logfile"
set runfile = $logfile:r.csh

echo "\
time python $LENSTRACTOR_DIR/LensTractor.py -n \\
  $LENSTRACTOR_DIR/examples/H1413+117_10x10arcsec_55377.34051_*.fits \\
  --optimization-rounds 3 \\
  --optimization-steps-catalog 10 \\
  --optimization-steps-psf 0 \\
    > $logfile"   > $runfile

now > $logfile
echo " " >> $logfile
cat $runfile >> $logfile
echo " " >> $logfile

source $runfile
# 64.250u 5.589s 1:19.79 87.5%    0+0k 212+220io 1726pf+0w
# 80s for 30 opt steps, cf 60s for 20
# 
# 80 = c + m*30
# 55 = c + m*20
# -------------
# 25 =     m*10 -> 2.5s per step per 1 image; c = 5s
# 
# At most we have 5 filters * 12 epochs = 60 images
# If we take 30 steps, that's about 2.5*30*60 = 75 mins! Can this be right?
# Still plotting every step!
# Test with more images; also look at dynamic opt, based on value of dlnp...

mv $LENSTRACTOR_DIR/examples/H1413+117_10x10arcsec_55377.34051_*png $expt/

# Typically dlnp is still 10-100 after 30 steps, so still optimizing...

grep BIC $logfile
# nebula1 results: chisq, K, N, BIC = 7190.3225888 16 2401 7314.86083834
# nebula2 results: chisq, K, N, BIC = 5374.75617851 19 2401 5522.64534984
# nebula4 results: chisq, K, N, BIC = 3624.25259014 25 2401 3818.84360505

goto FINISH

# Now, try with all 3 test images and PSF variation...

# START:

set expt = $LENSTRACTOR_DIR/examples/2013-01-24_nebula+psf-1-2-4-random-init
mkdir -p $expt
chdir $expt

set logfile = $expt/H1413+117_10x10arcsec_lenstractor_nebula-testing.log
echo "Running LensTractor, output in $logfile"
set runfile = $logfile:r.csh

echo "\
time python $LENSTRACTOR_DIR/LensTractor.py -x -n \\
  $LENSTRACTOR_DIR/examples/H1413+117_10x10arcsec_55*.fits \\
  --optimization-rounds 3 \\
  --optimization-steps-catalog 10 \\
  --optimization-steps-psf 10 \\
    > $logfile"   > $runfile

now > $logfile
echo " " >> $logfile
cat $runfile >> $logfile
echo " " >> $logfile

source $runfile
# With all plots:
# 231.842u 32.127s 5:23.63 81.5%  0+0k 233+346io 100333pf+0w
# With some plots:
# 33.090u 1.369s 0:35.63 96.6%    0+0k 224+193io 953pf+0w

# 320 secs for 60 steps * 3 images = 1.8s / step / image
# 36 secs -> 0.2 s/step/image OK FINE.

# No plots, 10 PSF opt steps:
# 45.235u 1.485s 0:48.34 96.6%    0+0k 0+22io 0pf+0w

mv $LENSTRACTOR_DIR/examples/*png $expt/

grep BIC $logfile
# nebula1 results: chisq, K, N, BIC = 15090.4641175 32 7203 15374.6962098
# nebula2 results: chisq, K, N, BIC = 14604.5413981 36 7203 14924.302502
# nebula4 results: chisq, K, N, BIC = 10306.8428746 44 7203 10697.6620015

# Clear favouring of 4 pts over 1 or 2!

goto FINISH

# ========================================================================================
# 2013-01-25 (Friday) 10:54 EST

# Initializing Lens model.

# Need a method that takes in a nebula and initializes hte lens model.
# Recipes:
# - galaxy center -> lens center?
# - galaxy q -> lens q
# - select pt srcs by proximity
# - brightest image plus lens center -> sour position

# First up: fix stepsizes and try and optimize lens, and compare with
# nebula - for one image, no PSF optimization.

# START:

set expt = $LENSTRACTOR_DIR/examples/2013-01-25_stepsize-testing
mkdir -p $expt
chdir $expt

set logfile = $expt/H1413+117_10x10arcsec_lenstractor_stepsize-testing.log
echo "Running LensTractor, output in $logfile"
set runfile = $logfile:r.csh

echo "\
time python $LENSTRACTOR_DIR/LensTractor.py  \\
  $LENSTRACTOR_DIR/examples/H1413+117_10x10arcsec_55377.3405*.fits \\
  --optimization-rounds 3 \\
  --optimization-steps-catalog 50 \\
  --optimization-steps-psf 0 \\
    > $logfile"   > $runfile

now > $logfile
echo " " >> $logfile
cat $runfile >> $logfile
echo " " >> $logfile

source $runfile
# 49.450u 1.476s 0:51.30 99.2%    0+0k 0+13io 0pf+0w

mv $LENSTRACTOR_DIR/examples/*png $expt/

grep BIC $logfile
# nebula1 results: chisq, K, N, BIC = 5899.02491102 16 2401 6023.56316056
# nebula2 results: chisq, K, N, BIC = 3766.20330502 19 2401 3914.09247634
# nebula4 results: chisq, K, N, BIC = 2440.71568390 25 2401 2635.30669881
# lens results:    chisq, K, N, BIC = 6557.08384528 19 2401 6704.9730166

# Lens still doesn't fit well - but stepsizes seem sensible.
# alpha still heading to zero though. 

goto FINISH

# OK, try initializing using nebula properties!

# START:

set expt = $LENSTRACTOR_DIR/examples/2013-01-25_lens-init-testing
mkdir -p $expt
chdir $expt

set logfile = $expt/H1413+117_10x10arcsec_lenstractor_lens-testing.log
echo "Running LensTractor, output in $logfile"
set runfile = $logfile:r.csh

echo "\
time python -u $LENSTRACTOR_DIR/LensTractor.py -l \\
  $LENSTRACTOR_DIR/examples/H1413+117_10x10arcsec_55377.3405*.fits \\
  --optimization-rounds 1 \\
  --optimization-steps-catalog 150 \\
  --optimization-steps-psf 0 \\
    > $logfile"   > $runfile

now > $logfile
echo " " >> $logfile
cat $runfile >> $logfile
echo " " >> $logfile

source $runfile
# 49.450u 1.476s 0:51.30 99.2%    0+0k 0+13io 0pf+0w

mv $LENSTRACTOR_DIR/examples/*png $expt/

grep BIC $logfile
# nebula1 results: chisq, K, N, BIC = 5899.02491102 16 2401 6023.56316056
# nebula2 results: chisq, K, N, BIC = 3766.20330502 19 2401 3914.09247634
# nebula4 results: chisq, K, N, BIC = 2440.71568390 25 2401 2635.30669881
# lens results:    chisq, K, N, BIC = 6557.08384528 19 2401 6704.9730166

# Lens still doesn't fit well - but stepsizes seem sensible.
# alpha still heading to zero though. 

goto FINISH


# ========================================================================================
# 2013-02-11 (Monday) 10:30 GMT

# Eric visiting. 
# Investigate random initialisation of lens model

# Try ten positions, and 15 optimisation steps each. Fixed PSF.

START:

set expt = $LENSTRACTOR_DIR/examples/2013-02-11_lens-init-testing
mkdir -p $expt
chdir $expt

set logfile = $expt/H1413+117_10x10arcsec_lenstractor_lens-testing.log
echo "Running LensTractor, output in $logfile"
set runfile = $logfile:r.csh

echo "\
time python -u $LENSTRACTOR_DIR/LensTractor.py -l \\
  $LENSTRACTOR_DIR/examples/H1413+117_10x10arcsec_55377.3405*.fits \\
  --optimization-rounds 1 \\
  --optimization-steps-catalog 15 \\
  --optimization-steps-psf 0 \\
    > $logfile"   > $runfile

now > $logfile
echo " " >> $logfile
cat $runfile >> $logfile
echo " " >> $logfile

source $runfile

mv $LENSTRACTOR_DIR/examples/*png $expt/

grep BIC $logfile

goto FINISH

# ========================================================================================
# 2014-02-28 (Friday) 19:11 PST

# Investigating the SDSS empty image problem...
# First did some reorganisation - sdss folder, renamed LensTractor.py scripts
# to avoid confusion with one true LT script...

# Ran the example:

python LensTractor.py -x \
       -o examples/sdss/0951+2635/0951+2635_Nebula1.cat \
       examples/sdss/0951+2635/*fits > \
       examples/sdss/0951+2635/0951+2635_Nebula1.log

# Traceback (most recent call last):
#   File "LensTractor.py", line 649, in <module>
#     main()
#   File "LensTractor.py", line 444, in main
#     dlnp,X,a = chug.optimize(damp=3)
#   File "/Users/pjm/work/tractor/tractor/engine.py", line 1672, in optimize
#     shared_params=shared_params)
#   File "/Users/pjm/work/tractor/tractor/engine.py", line 2266, in getUpdateDirection
#     X = X[paramindexmap]
# IndexError: index 12 is out of bounds for size 12

# Hmm - what gives? PS1 example runs fine. Check log:

more examples/sdss/0951+2635/0951+2635_Nebula1.log

# ./usr/local/Cellar/python/2.7.2/lib/python2.7/site-packages/numpy/core/_methods.py:55: RuntimeWarning: Mean of empty slice.
#   warnings.warn("Mean of empty slice.", RuntimeWarning)
# /usr/local/Cellar/python/2.7.2/lib/python2.7/site-packages/numpy/core/_methods.py:67: RuntimeWarning: invalid value encountered in true_divide
#   ret = ret.dtype.type(ret / rcount)
# /usr/local/Cellar/python/2.7.2/lib/python2.7/site-packages/matplotlib/colors.py:533: RuntimeWarning: invalid value encountered in less
#   cbook._putmask(xa, xa<0.0, -1)
# Tractor: Finding derivs...
# ..
# Set Ncols= 12
# shared_params: before, X len 12 with 2 non-zero entries
# paramindexmap: len 19 range 0 18

# As Adri says - empty images being read in? Check that dm.py is working, 
# by running with -v (verbose) option...

python LensTractor.py -x -v \
       -o examples/sdss/0951+2635/0951+2635_Nebula1.cat \
       examples/sdss/0951+2635/*fits > \
       examples/sdss/0951+2635/0951+2635_Nebula1.log

# OK - mags look odd, but images are being read in fine:

# ...
# Making Tractor image from examples/sdss/0951+2635/r_*.fits:
# Read in sci image: (101, 101)
# Total flux: 97.0235
# Read in var image: (101, 101)
# Useful variance range: 0.003685 0.120483
# Useful image median level: 0.00337219
# Useful image median pixel uncertainty: 0.136104
#   PSF FWHM = 1.4 pixels
# GaussianMixturePSF: amps=(1.0,), means=(0.0, 0.0), var=(0.22714350384789489, 0.0, 0.0, 0.22714350384789489)
# PS1MagsPhotoCal: r band, zpt=[-5.7844352289010237]
# Total brightness of image (mag): -10.7516273423
# ConstantSky: 0.00337219
# FitsWcs: x0,y0 0.000,0.000, WCS Tan: crpix (46.0, 396.0), crval (147.886, 26.5999), cd (0.000104058, 0, 0, 3.56637e-05), image 101 x 101
#  
# Read in 4 image datasets
#   in 4 bands: ['g' 'i' 'r' 'z']
#   at 4 epochs
#  
# Generic initial position  101 101 (pixels)
# Generic initial SED  {'i': -10.555657486015932, 'r': -10.75162734230053, 'z': -9.6667740112751801, 'g': -10.675768966702206}
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# Initializing model: Nebula1
# ExpGalaxy at RaDecPos: RA, Dec = (147.88544, 26.58727) with Mags: g=-8.17577, i=-8.05566, r=-8.25163, z=-7.16677 and Galaxy Shape: re=0.50, ab=1.00, phi=0.0
# PointSource at RaDecPos: RA, Dec = (147.88544, 26.58727) with Mags: g=-8.17577, i=-8.05566, r=-8.25163, z=-7.16677
# Initialization complete.
# Model = [ExpGalaxy(pos=RaDecPos[147.88543929624, 26.587269007113626], brightness=Mags[-8.175768966702206, -8.0556574860159316, -8.2516273423005302, -7.1667740112751801], re=0.5, ab=1.00, phi=0.0), PointSource(RaDecPos[147.88543726665017, 26.587274873129836], Mags[-8.175768966702206, -8.0556574860159316, -8.2516273423005302, -7.1667740112751801])]
  
#/usr/local/Cellar/python/2.7.2/lib/python2.7/site-packages/numpy/core/_methods.py:55: RuntimeWarning: Mean of empty slice.


# What photocal is being called here?

# ============================================================================
# 2014-04-14 (Monday) 16:58 PDT

# At UCSB, with Adri. Track down SDSS issue. Compare PS1 example to SDSS one.
# Probem with photocal?

# Ran the example:

python LensTractor.py -x -v \
       -o examples/sdss/0951+2635/0951+2635_Nebula1.cat \
          examples/sdss/0951+2635/*fits > \
          examples/sdss/0951+2635/0951+2635_Nebula1.log

python LensTractor.py -x -v \
       -o examples/ps1/H1413+117_10x10arcsec_Nebula1.cat \
          examples/ps1/H1413+117_10x10arcsec_*.fits  > \
          examples/ps1/H1413+117_10x10arcsec_Nebula1.log

# OK, setting zpt to 22.5 gives plausible mags, but problem remains in log
# file:
# 
# mx == 0: 71 of 71 non-zero derivatives, 0 of 71 non-zero weights; 0 non-zero products
# Set Ncols= 12
# LSQR: 12 cols (2 unique), 1 elements
#   0.0 seconds
# shared_params: before, X len 12 with 2 non-zero entries
# paramindexmap: len 19 range 0 18
# Traceback (most recent call last):
#   File "LensTractor.py", line 649, in <module>
#     main()
#   File "LensTractor.py", line 444, in main
#     dlnp,X,a = chug.optimize(damp=3)
#   File "/Users/pjm/work/tractor/tractor/engine.py", line 1672, in optimize
#     shared_params=shared_params)
#   File "/Users/pjm/work/tractor/tractor/engine.py", line 2266, in getUpdateDirection
#     X = X[paramindexmap]
# IndexError: index 12 is out of bounds for size 12

# Fixed by Dustin's suggestion:
# 
#       self.chug.optimize(damp=3,shared_params=False)
# 
#=============================================================================
# 2014-04-23 (Wednesday) 10:59 PDT

# Visited UCSB, worked with Agnello on refactoring to make experiments easier.
# LensTractor as an object, that can initialize and drive itself... 

# Driving implemented: optimization and sampling.

# Intialization not yet started.

# Standard tests, to get roughly working fit. Include plots.

\rm -f examples/sdss/0951+2635/*.cat \
       examples/sdss/0951+2635/*.log \
       examples/sdss/0951+2635/*.png
python LensTractor.py -n 2 \
       -o examples/sdss/0951+2635/0951+2635_Nebula2.cat \
          examples/sdss/0951+2635/*sci.fits > \
          examples/sdss/0951+2635/0951+2635_Nebula2.log

# SDSS example fails:
# - WCS treatment not right (models don't line up?)
# - photocal treatment not right? Based on Agnello's reports...
# - PSF looks much too small

\rm -f examples/ps1/H1413+117*.cat \
       examples/ps1/H1413+117*.log \
       examples/ps1/H1413+117*.png
python LensTractor.py -n 4 \
       -o examples/ps1/H1413+117_10x10arcsec_Nebula4.cat \
          examples/ps1/H1413+117_10x10arcsec_*.fits  > \
          examples/ps1/H1413+117_10x10arcsec_Nebula4.log

# Refactoring of initialiszation complete. Merged back into master branch.
# Next: init Nebula4 from Nebula2, and Lens form NebulaK.

#=============================================================================
# 2014-04-27 (Sunday) 18:33 PDT

# On train from Santa Barbara. Implemented spawn Nebula method, and also 
# experimented with default method of driving LensTractor
# ("cunning_and_guile"). Seems promising - am getting good results on this
# simple Nebula4 test:

time python LensTractor.py -v -n 4 
  -o examples/ps1/H1413+117_10x10arcsec_Nebula4.cat
     examples/ps1/H1413+117_10x10arcsec_*.fits >
     examples/ps1/H1413+117_10x10arcsec_Nebula4.log 
# 25.577u 1.771s 0:27.38 99.8%    0+0k 0+56io 0pf+0w

# Runtime is not great, but fit is getting there...
# Here's the clean up:

\rm examples/ps1/*png examples/ps1/*cat examples/ps1/*log

# Here's the default run: N2->N4->Lens:

time python LensTractor.py -v 
  -o examples/ps1/H1413+117_10x10arcsec
     examples/ps1/H1413+117_10x10arcsec_*.fits >
     examples/ps1/H1413+117_10x10arcsec.log 
     
# Note the improved output catalog and png file names.
# Code fails at Lens initialization, by design. Next job is to init the Lens.

# One thing to note: currently, spawning Nebula4 from Nebula2 does not work
# very well, I don't know why. Maybe the fluxes of the new point sources are
# too large? A flux ratio of 0.2 works a little better - room for 
# improvement still.

#=============================================================================
# 2014-04-29 (Tuesday) 14:15 PDT


# OK, try initializing Lens. Adri's email:

#    The Nebula--> Lens initialisation I had in mind is very simple:
#    1- we adopt the galaxy as the center;
#    2- we compute x-xg,y-yg for all the (2 or 4) images;
#    3- we initialise the source xs,ys as Sum[x-xg,images]/N(images)
#    4- we call the (projected, angular) distance between source and
#     galaxy thetaS, the mean distance of the (2 or 4) images from
#     source as thetaE
#    5- te adopt a total magnification mu=2thetaS/thetaE,
#     small shear aligned with the galaxy (or at 90deg?)
#    6- the source's flux is the total flux from the (2 or 4)
#     Nebula images divided by mu.
# 
#    This is a very rough initialisation, but it should be vague
#     enough to offer a good initial guess in both cases (2 or 4 img's).
# 
#    So the workflow for initialising Lens from Nebula would be:
#    -- drive Nebula by optimizing, with Nr=10, Nc=1000
#    -- get X (the parameter array)
#    -- do points 1-6 above
#    -- drive Lens by optimizing, with Nc and Nc from the dictionary
#     (i.e. fed from command-line).
# 
#    A *very* final hack would be some sort of simulated annealing:
#    for iann in range(Nann)
#       -- varaux = var/(1+Nann-iann)
#       -- dataset =...
#       -- chug=...
#       -- drive [modeltype] by optimizing

# SDSS example:

\rm examples/sdss/0951+2635/*.png examples/sdss/0951+2635/*.log examples/sdss/0951+2635/*.cat 

python LensTractor.py -v -l -z --survey SDSS \
   -o examples/sdss/0951+2635/J0951n_30x30arcsec_99999.90000_r \
      examples/sdss/0951+2635/J*_r_sci.fits > \
      examples/sdss/0951+2635/J0951n_30x30arcsec_99999.90000_r.log &

# Works fine after fixing centroiding...
# Counter not being reset?

# Anyway, lens now initialized from nebula, albeit badly...!

#=============================================================================
# 2014-04-30 (Wednesday) 10:47 PDT

# Experimenting with optimizing PSF too, after initial Nebula fit:

# elif self.method == 'optimizing':
# 
#      # First optimize to get the model about right, at fixed PSF:
#      self.settings['Nrounds'] = 3
#      self.settings['Nsteps_optimizing_catalog'] = 5
#      self.settings['Nsteps_optimizing_PSFs'] = 0
#      self.optimize()
# 
#      # Now optimize PSF at fixed model:
#      self.settings['Nrounds'] = 1
#      self.settings['Nsteps_optimizing_catalog'] = 0
#      self.settings['Nsteps_optimizing_PSFs'] = 5
#      self.optimize()
# 
#      # Refine model at best PSF:
#      self.settings['Nrounds'] = 1
#      self.settings['Nsteps_optimizing_catalog'] = 5
#      self.settings['Nsteps_optimizing_PSFs'] = 0
#      self.optimize()
 
# Test on 0951:

\rm examples/sdss/0951+2635/*.png examples/sdss/0951+2635/*.log examples/sdss/0951+2635/*.cat 

time python LensTractor.py -v -l -z --survey SDSS \
   -o examples/sdss/0951+2635/J0951n_30x30arcsec_99999.90000 \
      examples/sdss/0951+2635/J*_?_sci.fits > \
      examples/sdss/0951+2635/J0951n_30x30arcsec_99999.90000.log &

# Works fine! Needed to re-thaw/re-freeze after PSF optimization.
# CPUtime to do Lens given Nebula with this optimization scheme ~ 1 minute.

#=============================================================================
# 2014-04-30 (Wednesday) 13:31 PDT

# Test on KiDS images that are checked in, and maybe some from the datapacks online.

set KIDS_DIR = /Users/pjm/work/stronglensing/KiDS/test-cutouts/data

set ids = (\
SLID_10058881_SID_8668 \
)

foreach id ( $ids )
    foreach filter ( u g r i )
        set sci = `ls $KIDS_DIR/*_${filter}_*_${id}_*100.fits`
        set exsci = examples/kids/KIDS_${id}_${filter}_sci.fits
        cp -v $sci $exsci
        set wht = $sci:r.weight.fits
        set exwht = `echo $exsci | sed s/sci/wht/g`
        cp -v $wht $exwht
    end
end

set id = KIDS_SLID_10058881_SID_8668
time python LensTractor.py -v -l -z --survey KIDS \
   -o examples/kids/${id} \
      examples/kids/${id}_?_???.fits > \
      examples/kids/${id}.log &

# Lens initializes, but can't make patches:

#   File "/users/pjm/work/stronglensing/LensTractor/lenstractor/lens.py", line 199, in getModelPatch
#     patch += PS.getModelPatch(img)
#   File "/Users/pjm/work/tractor/tractor/engine.py", line 525, in __add__
#     return self.performArithmetic(other, '__iadd__')
#   File "/Users/pjm/work/tractor/tractor/engine.py", line 492, in performArithmetic
#     assert(isinstance(other, Patch))
# AssertionError

# i band image has object masked out. Try running without this image:

\rm examples/kids/*.png examples/kids/*.log examples/kids/*.cat examples/kids/*.cookie 

set id = KIDS_SLID_10058881_SID_8668
time python LensTractor.py -v -l -z --survey KIDS \
   -o examples/kids/${id} \
      examples/kids/${id}_u_???.fits \
      examples/kids/${id}_g_???.fits \
      examples/kids/${id}_r_???.fits > \
      examples/kids/${id}.log &

# Lens wins BIC by exp(100) or so, getting a better fit. Why?
#  1) Nebula2 did not converge?
#  2) Lens only has one image, so the fit isnt messed up by the second point source. 
# Example output:

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# Nebula2 results: chisq, K, N, BIC = 22306.2232536 18 30603 22492.1426134
# DevGalaxy at RaDecPos: RA, Dec = (131.88174, 2.56325) with Mags: g=22.309, r=21.8946, u=23.2185 and Galaxy Shape: re=0.04, ab=0.92, phi=-126.0
# PointSource at RaDecPos: RA, Dec = (131.88163, 2.56311) with Mags: g=24.734, r=24.253, u=24.758
# PointSource at RaDecPos: RA, Dec = (131.88177, 2.56310) with Mags: g=23.8507, r=23.3332, u=24.8397
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# Lens results: chisq, K, N, BIC = 22268.1172902 16 30603 22433.3789434
# PointSourceLens comprising a LensGalaxy at RaDecPos: RA, Dec = (131.88175, 2.56326) with Mags: g=22.2455, r=21.8027, u=23.1461 and Galaxy Shape: re=0.11, ab=0.98, phi=72.0 and EinsteinRadius: 0.0737226 and External shear: gamma=0.2, phi=-149.1 and a PointSource at RaDecPos: RA, Dec = (131.88172, 2.56314) with Mags: g=23.7137, r=23.2222, u=24.177
# Lens parameter values written to: examples/kids/KIDS_SLID_10058881_SID_8668_Lens.cat
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# BIC =  {'Lens': 22433.378943382228, 'Nebula': 22492.142613356249}
# Hypothesis test result: Bayes factor in favour of Lens is exp[ 29.381834987 ]
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

# Try Nebula1 (init from scratch of course):

set id = KIDS_SLID_10058881_SID_8668
time python LensTractor.py -v -n 1 -z --survey KIDS \
   -o examples/kids/${id} \
      examples/kids/${id}_u_???.fits \
      examples/kids/${id}_g_???.fits \
      examples/kids/${id}_r_???.fits > \
      examples/kids/${id}_Nebula1.log &

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# Nebula1 results: chisq, K, N, BIC = 22371.1758922 13 30603 22505.4509854
# DevGalaxy at RaDecPos: RA, Dec = (131.88174, 2.56326) with Mags: g=22.2449, r=21.8268, u=23.1753 and Galaxy Shape: re=0.04, ab=0.91, phi=-82.2
# PointSource at RaDecPos: RA, Dec = (131.88174, 2.56309) with Mags: g=23.8223, r=23.3274, u=24.1568
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

# Hmm. Higher chisq than both Nebula2 and Lens! What's going on?
# Check number of images predicted by Lens:

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# Lens results: chisq, K, N, BIC = 22271.7981695 16 30603 22437.0598226
# PointSourceLens comprising a LensGalaxy at RaDecPos: RA, Dec = (131.88175,
# 2.56326) with Mags: g=22.2736, r=21.8371, u=23.1691 and Galaxy Shape: re=0.11,
# ab=0.98, phi=-31.3 and EinsteinRadius: 0.100867 and External shear: gamma=0.1,
# phi=-20.9 and a PointSource at RaDecPos: RA, Dec = (131.88176, 2.56315) with
# Mags: g=23.7331, r=23.2332, u=24.2091 where 1 images are predicted
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

# OK, reject these as weak lenses!
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# BIC =  {'Lens': 22439.465100882804, 'Nebula': 22468.750809488483}
# Hypothesis test result: Bayes factor in favour of Lens is exp[ 14.6428543028 ]
# BUT: Lens predicts only 1 image, so it's not a strong lens.
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

# OK. Need to write this result out as a cookie...
# Done! Amend rm statement.

# Now: test on 0951!

\rm examples/sdss/0951+2635/*.png examples/sdss/0951+2635/*.log \
    examples/sdss/0951+2635/*.cat examples/sdss/0951+2635/*.cookie 

time python LensTractor.py -v -l -z --survey SDSS \
   -o examples/sdss/0951+2635/J0951n_30x30arcsec_99999.90000 \
      examples/sdss/0951+2635/J*_?_sci.fits > \
      examples/sdss/0951+2635/J0951n_30x30arcsec_99999.90000.log &
      
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# Nebula2 results: chisq, K, N, BIC = 92569.9986223 21 22500 92780.4453047
# DevGalaxy at RaDecPos: RA, Dec = (147.84399, 26.58708) with Mags: g=18.7648, i=18.2156, r=18.2473, z=18.8377 and Galaxy Shape: re=0.30, ab=0.62, phi=-51.5
# PointSource at RaDecPos: RA, Dec = (147.84400, 26.58711) with Mags: g=19.5918, i=19.2204, r=19.3628, z=18.7996
# PointSource at RaDecPos: RA, Dec = (147.84394, 26.58705) with Mags: g=18.1281, i=17.6969, r=17.7414, z=17.5997
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# Lens results: chisq, K, N, BIC = 91081.5245173 18 22500 91261.9073878
# PointSourceLens comprising a LensGalaxy at RaDecPos: RA, Dec = (147.84399, 26.58709) with Mags: g=18.6027, i=18.1117, r=18.1779, z=18.4956 and Galaxy Shape: re=0.37, ab=0.75, phi=-54.9 and EinsteinRadius: 0.15453 and External shear: gamma=0.1, phi=-81.8 and a PointSource at RaDecPos: RA, Dec = (147.84397, 26.58708) with Mags: g=19.3766, i=18.9119, r=18.9762, z=18.7924 where 2 images are predicted
# Lens parameter values written to: examples/sdss/0951+2635/J0951n_30x30arcsec_99999_Lens.cat
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# BIC =  {'Lens': 91261.907387838088, 'Nebula': 92780.44530469543}
# Hypothesis test result: Bayes factor in favour of Lens is exp[ 759.268958429 ]
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


# Hmm: Lens still returning lower chisq. Why is this?
# Nebula seems to want to fit point sources with nebuluous galaxy. Lens has
# to have 2 points, and so fits better. Do we need to return to Nebula 
# after fitting Lens, in order to ensure chisq(Nebula) is lower? Hmm...


# Relatedly, what do we get for H1413? Do Nebula2,4,Lens.

\rm examples/ps1/*png examples/ps1/*cat examples/ps1/*log examples/ps1/*cookie

time python LensTractor.py -v -z \
  -o examples/ps1/H1413+117_10x10arcsec \
     examples/ps1/H1413+117_10x10arcsec_*.fits > \
     examples/ps1/H1413+117_10x10arcsec.log &

# First time running with PSF optimization?
# 
# In this run, BIC(N4) < BIC(Lens) < BIC(N2) - but Lens loses big time.
# Inspection of images shows that PSF screws up horribly, such that all fits 
# are kind of meaningless. Need to do N4 without PSF optimization, in this case.
# Run time was about 95 secs.

# If we just do N4->Lens, we get bad fits too. Hacked this into the main script:
#      modelnames = ['Nebula4','Lens']
# and ran with -l.

# Does it really need the sampling step, then?
# Try with out the -z flag, to include a bit of sampling.

time python LensTractor.py -v -l \
  -o examples/ps1/H1413+117_10x10arcsec \
     examples/ps1/H1413+117_10x10arcsec_*.fits > \
     examples/ps1/H1413+117_10x10arcsec.log &
     
# Helps a bit - but we really need Nebula4 to converge before optimizing the
# PSFs, otherwise they go elliptical and cover up some of the bad fit...

# =============================================================================
# 2014-05-04 (Sunday) 22:32 PDT

# Put all panels in one plot...

\rm examples/ps1/*png examples/ps1/*cat examples/ps1/*log examples/ps1/*cookie
time python LensTractor.py -v -z \
  -o examples/ps1/H1413+117_10x10arcsec \
     examples/ps1/H1413+117_10x10arcsec_*.fits > \
     examples/ps1/H1413+117_10x10arcsec.log &
     
# OK, looks good.
# Next up:
#  - overlay image name on data image, bottom lefthand corner
#  - overlay cartoon model on predicted image
#  - overlay goodness of fit on residual image
#  - figure out how to zoom in to only show 6x6 arcsec
#  - make PSF images only 6x6 arcsec...

# =============================================================================
# 2014-05-06 (Tuesday) 15:58 PDT

# Manual initialization - for testing optimizer. Suggested by Tommaso.

# Here's the H1413 example:
\rm examples/ps1/*png examples/ps1/*cat examples/ps1/*log examples/ps1/*cookie
time python LensTractor.py -v -n 4 -z \
  -o examples/ps1/H1413+117_10x10arcsec \
     examples/ps1/H1413+117_10x10arcsec_*.fits

cp examples/ps1/H1413+117_10x10arcsec_Nebula4.cat examples/ps1/n4.txt
cp examples/ps1/H1413+117_10x10arcsec_progress-06_optimizing_Nebula4.png  examples/ps1/n4.PNG
     
# Save as "n4.txt" for initialization tests, also save plot for reference as 
# "n4.PNG". Now run with manual optimization:

\rm examples/ps1/*png examples/ps1/*cat examples/ps1/*log examples/ps1/*cookie
time python LensTractor.py -v -n 4 -z \
  --manual examples/ps1/n4.txt \
  -o examples/ps1/H1413+117_10x10arcsec \
     examples/ps1/H1413+117_10x10arcsec_*.fits

# Looks good, except initial sources are quite faint? No, they're always like that. Check in.

# Now initialize from ds9 positions, using handy script:

ds9regions2initcat.csh --filters 2  ds9.reg
# Processing 1 ds9 region files...
#        6 ds9.cat

more ds9.cat
# # Dummy LensTractor-format catalog containing Nebula positions
# # Data source: ds9.reg
# # Written by ds9regions2initcat.csh on Tue May 6 16:52:08 PDT 2014
# # Model: Nebula4
# # 
# 213.94271 11.495453 99 99 99 99 99 213.94267 11.49535 99 99 213.94252 11.49555 99 99 213.94276 11.495617 99 99 213.94288 11.495387 99 99

# Now test, by copying this into n4.txt and rerunning...
cp ds9.cat examples/ps1/n4.txt 

# Works fine! Now ready for Adri to derive starting positions for SDSS examples.

# Renamed examples:

mv examples/ps1/n4.txt examples/ps1/H1413+117_10x10arcsec_Nebula4_init.txt
mv examples/ps1/n4.reg examples/ps1/H1413+117_10x10arcsec_Nebula4_init.reg

\rm examples/ps1/*png examples/ps1/*cat examples/ps1/*log examples/ps1/*cookie
time python LensTractor.py -v -n 4 -z \
  --manual examples/ps1/H1413+117_10x10arcsec_Nebula4_init.txt \
  -o examples/ps1/H1413+117_10x10arcsec \
     examples/ps1/H1413+117_10x10arcsec_*.fits > \
     examples/ps1/H1413+117_10x10arcsec_Nebula4.log &
tail -f examples/ps1/H1413+117_10x10arcsec_Nebula4.log

# Nebula4 results: chisq, K, N, BIC = 9541.14230606 23 7203 9745.43412241

# OK, good. Now try lens - this runs Nebula4 first in any case...

\rm examples/ps1/*png examples/ps1/*cat examples/ps1/*log examples/ps1/*cookie
time python LensTractor.py -v -l -z \
  --manual examples/ps1/H1413+117_10x10arcsec_Nebula4_init.txt \
  -o examples/ps1/H1413+117_10x10arcsec \
     examples/ps1/H1413+117_10x10arcsec_*.fits > \
     examples/ps1/H1413+117_10x10arcsec_Lens.log &
tail -f examples/ps1/H1413+117_10x10arcsec_Lens.log

# Nebula4 results: chisq, K, N, BIC = 9541.14230606 23 7203 9745.43412241
# Lens results: chisq, K, N, BIC = 17196.5458015 14 7203 17320.8973419
# BIC =  {'Lens': 17320.897341899403, 'Nebula': 9745.4341224117252}
# Hypothesis test result: Bayes factor in favour of Lens is exp[ -3787.73160974 ]
# BUT: Lens predicts only 1 image, so it's not a strong lens.

# Hmm. Lens intialization is *terrible*! 
# Also note Nebula4 optimized to the exact same BIC as before, good.
# Just need to work on Lens init from Nebula. AS USUAL

# =============================================================================
# 2014-05-23 (Friday) 14:28 PDT

# New code from Adri, differet way of spawning lens. Try it out!
# He's working in the master branch...

\rm examples/ps1/*png examples/ps1/*cat examples/ps1/*log examples/ps1/*cookie
time python LensTractor.py -v -l -z \
  --manual examples/ps1/H1413+117_10x10arcsec_Nebula4_init.txt \
  -o examples/ps1/H1413+117_10x10arcsec \
     examples/ps1/H1413+117_10x10arcsec_*.fits > \
     examples/ps1/H1413+117_10x10arcsec_Lens.log &
tail -f examples/ps1/H1413+117_10x10arcsec_Lens.log

# Runs, despite odd indentation:

# Initializing model: Lens
# Initializing Lens model from Nebula4 template...
# Galaxy's brightness =  14.1211924654
# Zeroth-order source displacement =  -0.000105005422256 ,  -1.97001781128e-05
# Number of peaks =  4
# Galaxy position =  213.942815197 ,  11.4955025664
# Offset in Enstein radii =  0.489670368782
# Estimated Einstein Radius (arcsec) =  EinsteinRadius: 0.770238
# Estimated shear amplitude gamma1 =  -0.40717027515
# Estimated shear amplitude gamma2 =  -0.15526175081
# Estimated shear amplitude gamma =  0.435768108322
# Estimated shear angle (degrees) =  10.438741833
# PointSource at RaDecPos: RA, Dec = (213.94275, 11.49550) with Mags: r=14.818, z=15.0225
# Initialization complete: 
# PointSourceLens comprising a LensGalaxy at RaDecPos: RA, Dec = (213.94282, 11.49550) with Mags: r=14.1212, z=14.5674 and Galaxy Shape: re=0.53, ab=0.96, phi=-91.1 and EinsteinRadius: 0.770238 and External shear: gamma=0.4, phi=10.4 and a PointSource at RaDecPos: RA, Dec = (213.94275, 11.49550) with Mags: r=14.818, z=15.0225 where 4 images are predicted

# But images show ra separation is way too high. Need to multiply by cos(dec), probably.
# Adri's request:

#    I've pushed the new spawn, it's in model.py, I'm still working on the formulae but we
#    must also convert ra,dec into pixel positions (to compute Ax, Ay, sum etc) and just at
#    the end into ra,dec again. @drphilmarshall , would you please manage to do it? It'd take
#    longer to me digging into the Tractor than to you simply writing the two necessary lines
#    of code. We'd like to get to the next strides telecon with results! I'll refine the
#    formulae in the meanwhile.

# He doesn't mean pixel positions I think... th emodel is all in world coords. 
# But the separations do need to be correct...

# Implemented declination correction, fixed indentation bug. Initial model still sucks!

# Initializing model: Lens
# Initializing Lens model from Nebula4 template...
# Galaxy's brightness =  14.1211924654
# Solving for source position, shear etc...
# Zeroth-order source displacement (arcsec) =  -0.37043658168 ,  -0.0709206412061
# Number of images =  4
# Galaxy position =  213.942815197 ,  11.4955025664
# Offset in Einstein radii =  0.489670368782
# Estimated Einstein Radius (arcsec) =  EinsteinRadius: 0.770238
# Estimated shear amplitude gamma1 =  -0.341016536494
# Estimated shear amplitude gamma2 =  -0.151342002784
# Estimated shear amplitude gamma =  0.373090712788
# Estimated shear angle (degrees) =  11.9688598778
# PointSource at RaDecPos: RA, Dec = (213.94275, 11.49550) with Mags: r=14.818, z=15.0225
# Initialization complete: 
# PointSourceLens comprising a LensGalaxy at RaDecPos: RA, Dec = (213.94282, 11.49550) with Mags: r=14.1212, z=14.5674 and Galaxy Shape: re=0.53, ab=0.96, phi=-91.1 and EinsteinRadius: 0.770238 and External shear: gamma=0.4, phi=12.0 and a PointSource at RaDecPos: RA, Dec = (213.94275, 11.49550) with Mags: r=14.818, z=15.0225 where 4 images are predicted


# Email back to Adri, to check equations. Galaxy brightness looks suspiciously high...

# =============================================================================
# 2014-05-29 (Thursday) 18:56 PDT

# Dustin recommends getting SDSS data with his sdss_getimage tractor code.
# This would (I think) grab a suitably sized cutout, including weight image, 
# given Ra and Dec. Give LensTractor the option, if --survey SDSS, of 
# --radec alpha delta (in degrees), and the go and pull the data down into 
# a suitably named directory before Riffling and Dealing it.

# Look up Ra, Dec for SDSSJ0951.
# At http://www-utap.phys.s.u-tokyo.ac.jp/~sdss/sqls/lens.html
# there is a link to the skyserver at
# http://cas.sdss.org/astro/en/tools/explore/obj.asp?ra=147.844080&dec=+26.587220

# Degrees:
# 147.844080 +26.587220

# Hexagesimal:
# 09:51:22.57 +26:35:13.96

# Here's the test command. Note that the -o option shows where the 
# FITS files are to be downloaded to. Run, camcol, field (frame?) come from
# 0951 example fits files. We'll have to look up all of these numbers for 
# the sample... Execute this example in th e0951 directory.

set rcf = "5038,153,3,147.844080,26.587220,10.0"
set stem = examples/sdss/0951+2635/SDSSJ0951+2635_10x10arcsec

python LensTractor.py -v -n 4 -z --SDSS $rcf -o $stem 

# OK, close. The call to get_tractor_image fails because the astrometry code has not built:

# File "/Users/pjm/work/astrometry/astrometry/libkd/spherematch.py", line 409, in <module>
#     tree_permute = spherematch_c.kdtree_permute
# AttributeError: 'module' object has no attribute 'kdtree_permute'

# In the tractor/astrometry directory, I followed the steps in checkout.sh and got:

cd $TRACTOR_dir/astrometry/libkd
make pyspherematch

# clang -arch x86_64 -g -Wall   -pthread -march=native -O3 -fomit-frame-pointer -DNDEBUG -fpic -Winline -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE   -I../qfits-an -I../util -I../util  -I../qfits-an -I../util -I../gsl-an  -I/usr/local/Cellar/python/2.7.2/include/python2.7 -MM -MP  pyspherematch.c > pyspherematch.dep.tmp && mv pyspherematch.dep.tmp pyspherematch.dep
# pyspherematch.c:24:10: fatal error: 'numpy/arrayobject.h' file not found
# #include "numpy/arrayobject.h"

# Emailed dstn.

# OK, looks like you have to fix some links in the distribution directory, 
# at least according to https://groups.google.com/forum/#!topic/cython-users/_PyzG5F4LoA

# Here's where my arrayobject.h file lives: /usr/local/lib/python2.7/site-packages/numpy/core/include/numpy
# Advice is to link this (and other header files?) into the directory where python.h lives.
# This is /usr/local/include/python2.7 (although NB, th efile is actually Python.h)

cd /usr/local/include/python2.7
sudo ln -s /usr/local/lib/python2.7/site-packages/numpy/core/include/numpy .

# OK, make pyspherematch gets a bit further along. Now I get this:

# clang -arch x86_64 -g -Wall -ffinite-math-only  -pthread -march=native -O3 -fomit-frame-pointer -DNDEBUG -fpic -Winline -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE   -I../qfits-an -I../util -I../util  -I../qfits-an -I../util -I../gsl-an  -I/usr/local/Cellar/python/2.7.2/include/python2.7 -g -Wall -ffinite-math-only  -pthread -march=native -O3 -fomit-frame-pointer -DNDEBUG -fpic -Winline -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE -I.   -c -o sys/infnan.o sys/infnan.c
# clang: warning: argument unused during compilation: '-march=native'
# clang: warning: argument unused during compilation: '-O3'
# sys/infnan.c:98:3: error: #error "cannot define gsl_finite without
#       HAVE_DECL_FINITE or HAVE_IEEE_COMPARISONS"
# # error "cannot define gsl_finite without HAVE_DECL_FINITE or ...
#   ^
# sys/infnan.c:115:3: error: #error "cannot define gsl_isnan without
#       HAVE_DECL_ISNAN or HAVE_IEEE_COMPARISONS"
# # error "cannot define gsl_isnan without HAVE_DECL_ISNAN or ...
#   ^
# 2 errors generated.

# Is this a result of not having run configure, in checkout.sh? Advice please.

# ----------------------------------------------------------------------------
# 2014-06-11 (Wednesday) 13:40 PDT

# Fixing various astrometry build errors.

brew install pkg-config

# Then svn up in astrometry, then try building again using stripped down
# script. In $TRACTOR_DIR:

./build_astrometry.sh > & build_astrometry_2014-06-11.log &

# Then re-try example:

set rcf = "5038,153,3,147.844080,26.587220,10.0"
set stem = examples/sdss/0951+2635/SDSSJ0951+2635_10x10arcsec

python LensTractor.py -v -n 4 -z --SDSS $rcf -o $stem 

# Still not building pyspherematch?

# Here's the build record, by hand:

    cd astrometry/
    make pyutil
        make -C qfits-an
        make[1]: Nothing to be done for `all'.
        make -C gsl-an
        make[1]: Nothing to be done for `all'.
        make -C util pyutil
        LDFLAGS="-Wall -undefined dynamic_lookup -arch x86_64 -Wall -undefined dynamic_lookup -arch x86_64 -g -Wall -ffinite-math-only  -pthread -march=native -O3 -fomit-frame-pointer -DNDEBUG -fpic -Winline" LDLIBS="          -lm        -lm" SLIB="../util/libanfiles.a ../libkd/libkd.a ../util/libanutils.a  ../qfits-an/libqfits.a ../util/libanbase.a     ../gsl-an/libgsl-an.a  ../util/libanutils.a  ../qfits-an/libqfits.a ../util/libanbase.a     ../gsl-an/libgsl-an.a " \
                INC="-I../util -I../libkd -I../util  -I../qfits-an -I../util -I../gsl-an  -I../util  -I../qfits-an -I../util -I../gsl-an " CFLAGS="  " \
                python setup-util.py build_ext -v --inplace --build-temp .
        link: ['-Wall', '-undefined', 'dynamic_lookup', '-arch', 'x86_64', '-Wall', '-undefined', 'dynamic_lookup', '-arch', 'x86_64', '-g', '-Wall', '-ffinite-math-only', '-pthread', '-march=native', '-O3', '-fomit-frame-pointer', '-DNDEBUG', '-fpic', '-Winline', '-lm', '-lm']
        objs: ['../util/libanfiles.a', '../libkd/libkd.a', '../util/libanutils.a', '../qfits-an/libqfits.a', '../util/libanbase.a', '../gsl-an/libgsl-an.a', '../util/libanutils.a', '../qfits-an/libqfits.a', '../util/libanbase.a', '../gsl-an/libgsl-an.a']
        inc: ['../util', '../libkd', '../util', '../qfits-an', '../util', '../gsl-an', '../util', '../qfits-an', '../util', '../gsl-an']
        cflags: []
        running build_ext
        building '_util' extension
        swigging util.i to util_wrap.c
        C compiler: clang -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes

        compile options: '-I/usr/local/Cellar/python/2.7.2/lib/python2.7/site-packages/numpy/core/include -I../util -I../libkd -I../util -I../qfits-an -I../util -I../gsl-an -I../util -I../qfits-an -I../util -I../gsl-an -I. -I/usr/local/Cellar/python/2.7.2/include/python2.7 -c'
        clang: util_wrap.c
        In file included from util_wrap.c:112:
        In file included from /usr/local/Cellar/python/2.7.2/include/python2.7/Python.h:126:
        /usr/local/Cellar/python/2.7.2/include/python2.7/modsupport.h:27:65: warning: 'format' attribute argument not supported: PyArg_ParseTuple
        PyAPI_FUNC(int) PyArg_ParseTuple(PyObject *, const char *, ...) Py_FORMAT_PARSETUPLE(PyArg_ParseTuple, 2, 3);
                                                                        ^
        In file included from util_wrap.c:112:
        In file included from /usr/local/Cellar/python/2.7.2/include/python2.7/Python.h:58:
        /usr/local/Cellar/python/2.7.2/include/python2.7/pyport.h:871:57: note: instantiated from:
        #define Py_FORMAT_PARSETUPLE(func,p1,p2) __attribute__((format(func,p1,p2)))
                                                                ^
        util_wrap.c:853:38: warning: format string is not a string literal (potentially insecure) [-Wformat-security]
            PyErr_Format(PyExc_RuntimeError, mesg);
                                             ^~~~
        In file included from util_wrap.c:2531:
        In file included from /usr/local/Cellar/python/2.7.2/lib/python2.7/site-packages/numpy/core/include/numpy/arrayobject.h:4:
        In file included from /usr/local/Cellar/python/2.7.2/lib/python2.7/site-packages/numpy/core/include/numpy/ndarrayobject.h:17:
        In file included from /usr/local/Cellar/python/2.7.2/lib/python2.7/site-packages/numpy/core/include/numpy/ndarraytypes.h:1761:
        /usr/local/Cellar/python/2.7.2/lib/python2.7/site-packages/numpy/core/include/numpy/npy_1_7_deprecated_api.h:15:2: warning: #warning "Using deprecated NumPy API, disable it by "          "#defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION" [-W#warnings]
        #warning "Using deprecated NumPy API, disable it by " \
         ^
        3 warnings generated.
        /usr/bin/gcc-4.2 -bundle -undefined dynamic_lookup -L/usr/local/Cellar/readline/6.2.2/lib -Wall -undefined dynamic_lookup -Wall -undefined dynamic_lookup -g -Wall -ffinite-math-only -pthread -march=native -O3 -fomit-frame-pointer -DNDEBUG -fpic -Winline ./util_wrap.o ../util/libanfiles.a ../libkd/libkd.a ../util/libanutils.a ../qfits-an/libqfits.a ../util/libanbase.a ../gsl-an/libgsl-an.a ../util/libanutils.a ../qfits-an/libqfits.a ../util/libanbase.a ../gsl-an/libgsl-an.a -o /Users/pjm/work/tractor/astrometry/util/_util.so -Wall -undefined dynamic_lookup -arch x86_64 -Wall -undefined dynamic_lookup -arch x86_64 -g -Wall -ffinite-math-only -pthread -march=native -O3 -fomit-frame-pointer -DNDEBUG -fpic -Winline -lm -lm
        LDFLAGS="-Wall -undefined dynamic_lookup -arch x86_64 -Wall -undefined dynamic_lookup -arch x86_64 -g -Wall -ffinite-math-only  -pthread -march=native -O3 -fomit-frame-pointer -DNDEBUG -fpic -Winline" LDLIBS="          -lm        -lm" SLIB="../util/libanfiles.a ../libkd/libkd.a ../util/libanutils.a  ../qfits-an/libqfits.a ../util/libanbase.a     ../gsl-an/libgsl-an.a  ../util/libanutils.a  ../qfits-an/libqfits.a ../util/libanbase.a     ../gsl-an/libgsl-an.a " \
                INC="-I../util -I../libkd -I../util  -I../qfits-an -I../util -I../gsl-an  -I../util  -I../qfits-an -I../util -I../gsl-an " CFLAGS="  " \
                python setup-util.py build_ext -v --inplace --build-temp .
        link: ['-Wall', '-undefined', 'dynamic_lookup', '-arch', 'x86_64', '-Wall', '-undefined', 'dynamic_lookup', '-arch', 'x86_64', '-g', '-Wall', '-ffinite-math-only', '-pthread', '-march=native', '-O3', '-fomit-frame-pointer', '-DNDEBUG', '-fpic', '-Winline', '-lm', '-lm']
        objs: ['../util/libanfiles.a', '../libkd/libkd.a', '../util/libanutils.a', '../qfits-an/libqfits.a', '../util/libanbase.a', '../gsl-an/libgsl-an.a', '../util/libanutils.a', '../qfits-an/libqfits.a', '../util/libanbase.a', '../gsl-an/libgsl-an.a']
        inc: ['../util', '../libkd', '../util', '../qfits-an', '../util', '../gsl-an', '../util', '../qfits-an', '../util', '../gsl-an']
        cflags: []
        running build_ext
    cd libkd/
    make pyspherematch
        pyspherematch
    cd ../sdss/
    make
        make lib
        make[1]: Nothing to be done for `lib'.
    cd ../../
    make
        make -C tractor mix
        make[1]: Nothing to be done for `mix'.
        make -C tractor emfit
        make[1]: Nothing to be done for `emfit'.

# Seems to have all built correctly...

python LensTractor.py -v -n 4 -z --SDSS $rcf -o $stem

# Same error.

# OK, try a clean build. 

mv tractor tractor-variability
tractor-variability/checkout.sh >& checkout_2014-06-11.log &
 
# Ok, looks good!
mv checkout_2014-06-11.log tractor/.
 
# Ran the example again, same error. Here it is:

set rcf = "5038,153,3,147.844080,26.587220,10.0"
set stem = examples/sdss/0951+2635/SDSSJ0951+2635_10x10arcsec
python LensTractor.py -v -n 4 -z --SDSS $rcf -o $stem

#     Traceback (most recent call last):
#       File "LensTractor.py", line 25, in <module>
#         import lenstractor
#       File "/Users/pjm/work/stronglensing/LensTractor/lenstractor/__init__.py", line 4, in <module>
#         from sdss import *
#       File "/Users/pjm/work/stronglensing/LensTractor/lenstractor/sdss.py", line 22, in <module>
#         from tractor import sdss as st
#       File "/Users/pjm/work/tractor/tractor/sdss.py", line 31, in <module>
#         from astrometry.libkd.spherematch import match_radec
#       File "/Users/pjm/work/astrometry/astrometry/libkd/spherematch.py", line 409, in <module>
#         tree_permute = spherematch_c.kdtree_permute
#     AttributeError: 'module' object has no attribute 'kdtree_permute'


# Dustin says:

#    Ok, this is progress.
# 
#    What do you get with:
# 
#    python -c "import astometry.libkd.spherematch as sp; print sp.__file__"
#    python -c "import astometry.libkd.spherematch_c as spc; print spc.__file__"
#    python -c "import astometry.libkd.spherematch_c as spc; print dir(spc)"
# 
#    I'm guessing it's loading some other (older?) version of the
#    astrometry.net code.
# 
#    This has nothing to do with the tractor or lenstractor, it's something
#    about the astrometry.net install.
 
python -c "import astrometry.libkd.spherematch as sp; print sp.__file__"
#    AttributeError: 'module' object has no attribute 'kdtree_permute'

python -c "import astrometry.libkd.spherematch_c as spc; print spc.__file__"
#    /Users/pjm/work/astrometry/astrometry/libkd/spherematch_c.so

python -c "import astrometry.libkd.spherematch_c as spc; print dir(spc)"
#    ['__doc__', '__file__', '__name__', '__package__', 'kdtree_build',
# 'kdtree_close', 'kdtree_free', 'kdtree_open', 'kdtree_write', 'match',
# 'nearest']

# OK, looks like we need to remove old astrometry directory from the 
# PYTHONPATH. Indeed, let's just trash the whole thing.

python -c "import astrometry.libkd.spherematch as sp; print sp.__file__"
#    /Users/pjm/work/tractor/astrometry/libkd/spherematch.py

python -c "import astrometry.libkd.spherematch_c as spc; print spc.__file__"
#    /Users/pjm/work/tractor/astrometry/libkd/spherematch_c.so

python -c "import astrometry.libkd.spherematch_c as spc; print dir(spc)"
#   ['__doc__', '__file__', '__name__', '__package__', 'kdtree_bbox',
# 'kdtree_build', 'kdtree_close', 'kdtree_free', 'kdtree_get_positions',
# 'kdtree_n', 'kdtree_open', 'kdtree_permute', 'kdtree_print',
# 'kdtree_rangesearch', 'kdtree_write', 'match', 'match2', 'nearest',
# 'nearest2']

# OK, now try again: success. Well, python errors, but they are my own.

# Need to git pull tractor, there are some updates: sdss_galaxy no longer 
# exists, DevGalaxy etc are now in tractor/galaxy.py
# Here's the check:

grep sdss_galaxy *.py lenstractor/*py


# ============================================================================
# 2014-06-02 (Monday) 14:10 PDT

# The collected woes of Adriano Agnello:
# 
# 1) May 30: Manual init catalogs not being interpreted properly?
# 
# From Adri:
# 
# It seems that the initialization does something strange when reading in from
# .cat files; if you do
# 
#     python LensTractor.py -n 4 -z -v examples/ps1/H*sci.fits --survey PS1
# 
# and then
# 
#     python LensTractor.py -n 4 -z -v examples/ps1/H*sci.fits --survey PS1 --manual lenstractor_Nebula4.cat
# 
# you'll see that the last snapshot of the first passage does *not* correspond
# to the zeroth snapshot of the second passage! When reading from the
# catalogue, the point-sources are somehow scrambled and I don't understand
# why. Do you know what's happening?!
# 
# 
# 2) May 31: Fitting Nebula and Lens equally
# 
# From Adri:
# 
# I'd like chug to know how to optimize based on the model, so
# I'd actually add another argument to the driver. The idea is:
# 
# if we ask for Lens from command line, it should
# 
#     optimize nebula sources
#     optimize psf
#     re-optimize nebula sources
#     spawn lens
#     optimize lens sources
#     optimize psf
#     re-optimize lens sources
# 
# else, if we ask for Nebula from command line, it should
# 
#     [ optimize nebula sources
#     optimize psf
#     re-optimize nebula sources ] *twice*
# 
# I guess we should either write two very similar optimizer classes,
# i.e. opt_lens and opt_neb, to be called from the main LensTractor
# script, or introduce the modelname variable inside the
# existing optimizer. This however is what I'm not able to do
# without making a major mess. Do you think you'd be able to
# make this refactor?
# 
# 
# 3) June 1: Manual init catalogs not being interpreted properly?
# 
# From Adri:
# 
# I've tried running LT on the 0951 example, with manual initalisation
# otherwise it does stupid stuff, but there are *serious* problems with
# properly initialising the sources from the input catalog. I'm sending it
# attached, I've done it simply by drag-and-click with ds9 but then
# LensTractor puts the guys in completely wrong places! Try running and see...
# 
#     python LensTractor.py -n 2 -z -v examples/... --survey SDSS --manual examples/.../init.txt
# 
# I've emailed you the init.txt file.
# 
# In model.py I have commented a line out (which was tuned on PS1) and
# inserted the correct option for the SQLS examples. There's a double round of
# optimization in drive.py, which I comment out when running Lens. Can you
# figure out what's happening?


# Converted these to two github issues. Do refactor first, then look at init 
# problem.

# Issue 2) refactor to model-specific optimization. 

# Test on lens model:

\rm examples/ps1/*png examples/ps1/*cat examples/ps1/*log examples/ps1/*cookie
time python LensTractor.py -v -l -z \
  --manual examples/ps1/H1413+117_10x10arcsec_Nebula4_init.txt \
  -o examples/ps1/H1413+117_10x10arcsec \
     examples/ps1/H1413+117_10x10arcsec_*.fits > \
     examples/ps1/H1413+117_10x10arcsec_Lens.log &
tail -f examples/ps1/H1413+117_10x10arcsec_Lens.log

# Optimization scheme seems like it could work. 
# Code fails to initialize lens from nebula though: looks like a problem with 
# angles for Adri to solve.


# Issue 1) Manual init scramblings.

# Try Adri's test:

mkdir -p firstpassage; cd firstpassage
python ../LensTractor.py -n 4 -z -v ../examples/ps1/H*sci.fits --survey PS1 \
  > firstpassage.log

mkdir -p secondpassage; cd secondpassage
python ../LensTractor.py -n 4 -z -v ../examples/ps1/H*sci.fits --survey PS1 \
  --manual ../firstpassage/lenstractor_Nebula4.cat > secondpassage.log

# Compare plots:

open firstpassage/lenstractor_progress-04_optimizing_Nebula4.png \
    secondpassage/lenstractor_progress-00_initial_Nebula4.png

# Its true, initial positions of second passage do not match final positions of first passage.
# Check positions after read in from init file, in secondpassage.log:

# Initializing Nebula4 model from catalog...
# DevGalaxy at RaDecPos: RA, Dec = (213.94277, 11.49539) with Mags: r=15.2946, z=15.5652 and Galaxy Shape: re=1.00, ab=0.80, phi=0.0
# PointSource at RaDecPos: RA, Dec = (213.94284, 11.49558) with Mags: r=15.2946, z=15.5652
# PointSource at RaDecPos: RA, Dec = (213.94292, 11.49583) with Mags: r=15.2946, z=15.5652
# PointSource at RaDecPos: RA, Dec = (213.94253, 11.49558) with Mags: r=15.2946, z=15.5652
# PointSource at RaDecPos: RA, Dec = (213.94275, 11.49570) with Mags: r=15.2946, z=15.5652

# Compare with catalog written out in firstpassage/

cols lenstractor_Nebula4.cat
#  1        catalog.source0.pos.ra  2.139427701665881614e+02
#  2       catalog.source0.pos.dec  1.149538848865398499e+01
#  8        catalog.source1.pos.ra  2.139428380379461885e+02
#  9       catalog.source1.pos.dec  1.149558016251176973e+01
# 12        catalog.source2.pos.ra  2.139429153818444718e+02
# 13       catalog.source2.pos.dec  1.149582740543879567e+01
# 16        catalog.source3.pos.ra  2.139425325887738154e+02
# 17       catalog.source3.pos.dec  1.149558187566380774e+01
# 20        catalog.source4.pos.ra  2.139427521044458729e+02
# 21       catalog.source4.pos.dec  1.149569738880204994e+01

# Looks right. secondpassage initial plot looks way off though! Why?
# Double check numbers - put positions from secondpassage.log into a region
# file...

cp ../examples/ps1/H1413+117_10x10arcsec_Nebula4_init.reg firstpassage.reg

# and edit...
# OK, secondpassage.log regions agree with initial plot in second passage 
# These are the same as the positions written out to catalog at the end
# of firstpassage - so that all checks out. 

# Try re-running above test but without the PSF optimization...
# Looks like the positions are better before the PSF was tweaked.

mkdir -p firstpassage_frozenpsf; cd firstpassage_frozenpsf
python ../LensTractor.py -n 4 -z -v ../examples/ps1/H*sci.fits --survey PS1 \
  > firstpassage_frozenpsf.log

# Literally commented out parts of driver.optimize that fit PSF.
# Resulting positions, from log file:

# DevGalaxy at RaDecPos: RA, Dec = (213.94275, 11.49556) with Mags: r=13.0641, z=13.5599 and Galaxy Shape: re=1.19, ab=0.98, phi=106.9
# PointSource at RaDecPos: RA, Dec = (213.94250, 11.49556) with Mags: r=15.1032, z=15.1036
# PointSource at RaDecPos: RA, Dec = (213.94289, 11.49536) with Mags: r=14.7832, z=15.1418
# PointSource at RaDecPos: RA, Dec = (213.94307, 11.49544) with Mags: r=17.1714, z=17.9673
# PointSource at RaDecPos: RA, Dec = (213.94267, 11.49534) with Mags: r=14.5346, z=14.7401
 
# Made regions file...
cp ../examples/ps1/H1413+117_10x10arcsec_Nebula4_init.reg firstpassage_frozenpsf.reg

# 4 objects *are* in the right place, but galaxy is taking place of one
# point source. Then 4th point source is 1.1" out West, with low flux (17.2mag)...
# Not sure how to avoid this, but it shows that we cannot take point sources
# too seriously, just like we cannot take nebula galaxy too seriously...

# OK, ds9 regions are really useful. As would be model overlay on plots...

# Maybe DevGalaxy is the problem? Try making it an Exp?

mkdir -p firstpassage_expgalaxy; cd firstpassage_expgalaxy
python ../LensTractor.py -n 4 -z -v ../examples/ps1/H*sci.fits --survey PS1 \
  > firstpassage_expgalaxy.log

# ExpGalaxy at RaDecPos:   RA, Dec = (213.94270, 11.49542) with Mags: r=13.0127, z=13.4163 and Galaxy Shape: re=0.74, ab=0.75, phi=64.4
# PointSource at RaDecPos: RA, Dec = (213.94304, 11.49577) with Mags: r=17.5757, z=17.9351
# PointSource at RaDecPos: RA, Dec = (213.94252, 11.49560) with Mags: r=15.7069, z=15.7013
# PointSource at RaDecPos: RA, Dec = (213.94278, 11.49568) with Mags: r=15.522, z=15.8459
# PointSource at RaDecPos: RA, Dec = (213.94291, 11.49542) with Mags: r=15.4142, z=15.6781

# Try *these* in a regions file...

cp ../examples/ps1/H1413+117_10x10arcsec_Nebula4_init.reg firstpassage_expgalaxy.reg

# OK, same problem - one point source gets dimmed, while the galaxy is used
# to fit the data. No good! 

# In situations where the quasar images are the brightest things, 
# we may want to fit an "asterism" model first. Then spawn a nebula from
# th easterism, just by adding a galaxy. Try this in an asterism branch?

# Meanwhile, add points to plots to avoid ds9 shenanigans. 
# Positions and magnitudes (=sizes).

# Pulled in Adri's changes, try first and second passage again...Keep exp 
# galaxy!

mkdir -p firstpassage; cd firstpassage
python ../LensTractor.py -n 4 -z -v ../examples/ps1/H*sci.fits --survey PS1 \
  > firstpassage.log &

# Point sources are all over the shop, galaxy used to fit south-east image

mkdir -p secondpassage; cd secondpassage
python ../LensTractor.py -n 4 -z -v ../examples/ps1/H*sci.fits --survey PS1 \
  --manual ../firstpassage/lenstractor_Nebula4.cat > secondpassage.log &

# Compare plots:

open  \
firstpassage/lenstractor_progress-06_optimizing_Nebula4.png \
secondpassage/lenstractor_progress-00_initial_Nebula4.png 

# Models are consistent - just bad. Back to cunning and guile!

# Adri asks, what about sqls 1242? 
# init files not checked in, no sign of 1242. Try 0841, first with no init:

python LensTractor.py -n 4 -z -v --survey SDSS \
         examples/sdss/0814+5828/*sci.fits

# Hmm. Positions different in different images...

# Nebula4 results: chisq, K, N, BIC = 20805.430077 33 40804 21155.775745
# ExpGalaxy at RaDecPos: RA, Dec = (123.58479, 58.42518) with Mags: g=21.6415, i=63.2621, r=824.333, z=20.2959 and Galaxy Shape: re=0.86, ab=0.61, phi=66.4
# PointSource at RaDecPos: RA, Dec = (123.58486, 58.42496) with Mags: g=276.833, i=198.214, r=23.4595, z=18.7786
# PointSource at RaDecPos: RA, Dec = (123.58452, 58.42499) with Mags: g=18.7194, i=350.129, r=150.339, z=8.93371e+06
# PointSource at RaDecPos: RA, Dec = (123.58499, 58.42509) with Mags: g=152.715, i=79.2947, r=22.723, z=20.731
# PointSource at RaDecPos: RA, Dec = (123.58443, 58.42471) with Mags: g=21.8116, i=133365, r=98.3197, z=22.3167

# Compare with regions file/ init cat:

$LENSTRACTOR_DIR/utils/ds9regions2initcat.csh -f 4 ds9.reg
# Processing 1 ds9 region files...
#        6 ds9.cat
mv ds9.cat SDSSJ0814+5828_init.txt

# point(123.52327,58.478021) # point=cross
# point(123.52365,58.478245) # point=cross
# point(123.52292,58.477789) # point=cross

# Huh - central object according to ds9 is (0.06,0.06) away from 
# where LT fitted it. Yes: LT headers are screwed up. 

# Suspect this problem will only go away when we use the tractor routines for
# getting the SDSS images. 

# =============================================================================
# 2014-06-11 (Wednesday) 15:05 PDT

# Still trying to download SDSS data:

set rcf = "5038,153,3,147.844080,26.587220,10.0"
set stem = examples/sdss/0951+2635/SDSSJ0951+2635_10x10arcsec

python LensTractor.py -v -n 4 -z --SDSS $rcf -o $stem 

# Querying SDSS skyserver for data at ra,dec =  147.84408 26.58722
#   in run, camcol, field =  [5038, 153, 3]
# Looking to make cutouts that are  10.0  arcsec ( 25  pixels) across
# Checking for file psField-005038-153-0003.fit
# Retrieving from URL: http://data.sdss3.org/sas/dr9/boss/photo/redux/None/5038/objcs/153/psField-005038-153-0003.fit
# Command failed: command wget --continue -nv -O psField-005038-153-0003.fit.tmp 'http://data.sdss3.org/sas/dr9/boss/photo/redux/None/5038/objcs/153/psField-005038-153-0003.fit'
# Output: 
# Error: http://data.sdss3.org/sas/dr9/boss/photo/redux/None/5038/objcs/153/psField-005038-153-0003.fit:
# 2014-06-11 15:03:42 ERROR 404: Not Found.

# Check run, camcol, field at skyserver...
# Huh - I was nowehere near. Header not right?

set rcf = "5038,3,145,147.844080,26.587220,10.0"
set stem = examples/sdss/0951+2635/SDSSJ0951+2635_10x10arcsec

python LensTractor.py -v -n 4 -z --SDSS $rcf -o $stem 

# Querying SDSS skyserver for data at ra,dec =  147.84408 26.58722
#   in run, camcol, field =  [5038, 3, 145]
# Looking to make cutouts that are  10.0  arcsec ( 25  pixels) across
#  
# --------u-band--------
# Checking for file psField-005038-3-0145.fit
# Retrieving from URL: http://data.sdss3.org/sas/dr9/boss/photo/redux/301/5038/objcs/3/psField-005038-3-0145.fit
# Checking for file fpM-005038-u3-0145.fit
# Retrieving from URL: http://data.sdss3.org/sas/dr9/boss/photo/redux/301/5038/objcs/3/fpM-005038-u3-0145.fit.gz
# Checking for file frame-u-005038-3-0145.fits.bz2
# Retrieving from URL: http://data.sdss3.org/sas/dr9/boss/photoObj/frames/301/5038/3/frame-u-005038-3-0145.fits.bz2
# First get_tractor_image_dr8() failed -- trying to re-retrieve data
# Traceback (most recent call last):
#   File "/Users/pjm/work/tractor/tractor/sdss.py", line 845, in get_tractor_image_dr8
#     return _get_tractor_image_dr8(*args, **kwargs)
#   File "/Users/pjm/work/tractor/tractor/sdss.py", line 929, in _get_tractor_image_dr8
#     frame = sdss.readFrame(run, camcol, field, bandname, filename=fn)
#   File "/Users/pjm/work/tractor/astrometry/sdss/dr8.py", line 443, in readFrame
#     p = pyfits.open(fn)
#   File "/usr/local/Cellar/python/2.7.2/lib/python2.7/site-packages/pyfits/util.py", line 206, in _with_extensions_wrapper
#     return func(*args, **kwargs)
#   File "/usr/local/Cellar/python/2.7.2/lib/python2.7/site-packages/pyfits/hdu/hdulist.py", line 103, in fitsopen
#     return HDUList.fromfile(name, mode, memmap, **kwargs)
#   File "/usr/local/Cellar/python/2.7.2/lib/python2.7/site-packages/pyfits/hdu/hdulist.py", line 251, in fromfile
#     hdu = _BaseHDU.readfrom(ffo, **kwargs)
#   File "/usr/local/Cellar/python/2.7.2/lib/python2.7/site-packages/pyfits/hdu/base.py", line 282, in readfrom
#     raise IOError('Header missing END card.')
# IOError: Header missing END card.
# None
# 
# Checking for file psField-005038-3-0145.fit
# Retrieving from URL: http://data.sdss3.org/sas/dr9/boss/photo/redux/301/5038/objcs/3/psField-005038-3-0145.fit
# Checking for file fpM-005038-u3-0145.fit
# Retrieving from URL: http://data.sdss3.org/sas/dr9/boss/photo/redux/301/5038/objcs/3/fpM-005038-u3-0145.fit.gz
# Checking for file frame-u-005038-3-0145.fits.bz2
# Retrieving from URL: http://data.sdss3.org/sas/dr9/boss/photoObj/frames/301/5038/3/frame-u-005038-3-0145.fits.bz2
# Checking for file psField-005038-3-0145.fit
# Checking for file fpM-005038-u3-0145.fit
# Checking for file frame-u-005038-3-0145.fits.bz2
# Traceback (most recent call last):
#   File "LensTractor.py", line 388, in <module>
#     main()
#   File "LensTractor.py", line 249, in main
#     images,centroids,total_mags,bands = lenstractor.getSDSSdata(rcf,roi,datadir,vb=vb)
#   File "/Users/pjm/work/stronglensing/LensTractor/lenstractor/sdss.py", line 232, in getSDSSdata
#     image,info = st.get_tractor_image_dr9(run, camcol, field, band, roiradecsize=geometry)
#   File "/Users/pjm/work/tractor/tractor/sdss.py", line 1093, in get_tractor_image_dr9
#     return get_tractor_image_dr8(*args, **kwargs)
#   File "/Users/pjm/work/tractor/tractor/sdss.py", line 862, in get_tractor_image_dr8
#     return _get_tractor_image_dr8(*args, **kwargs)
#   File "/Users/pjm/work/tractor/tractor/sdss.py", line 929, in _get_tractor_image_dr8
#     frame = sdss.readFrame(run, camcol, field, bandname, filename=fn)
#   File "/Users/pjm/work/tractor/astrometry/sdss/dr8.py", line 443, in readFrame
#     p = pyfits.open(fn)
#   File "/usr/local/Cellar/python/2.7.2/lib/python2.7/site-packages/pyfits/util.py", line 206, in _with_extensions_wrapper
#     return func(*args, **kwargs)
#   File "/usr/local/Cellar/python/2.7.2/lib/python2.7/site-packages/pyfits/hdu/hdulist.py", line 103, in fitsopen
#     return HDUList.fromfile(name, mode, memmap, **kwargs)
#   File "/usr/local/Cellar/python/2.7.2/lib/python2.7/site-packages/pyfits/hdu/hdulist.py", line 251, in fromfile
#     hdu = _BaseHDU.readfrom(ffo, **kwargs)
#   File "/usr/local/Cellar/python/2.7.2/lib/python2.7/site-packages/pyfits/hdu/base.py", line 282, in readfrom
#     raise IOError('Header missing END card.')
# IOError: Header missing END card.

# Missing END card?! Send to Dustin.


# =============================================================================

FINISH:
